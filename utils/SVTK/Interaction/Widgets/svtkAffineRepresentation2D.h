/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkAffineRepresentation2D.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   svtkAffineRepresentation2D
 * @brief   represent 2D affine transformations
 *
 * This class is used to represent a svtkAffineWidget. This representation
 * consists of three parts: a box, a circle, and a cross. The box is used for
 * scaling and shearing, the circle for rotation, and the cross for
 * translation. These parts are drawn in the overlay plane and maintain a
 * constant size (width and height) specified in terms of normalized viewport
 * coordinates.
 *
 * The representation maintains an internal transformation matrix (see
 * superclass' GetTransform() method). The transformations generated by this
 * widget assume that the representation lies in the x-y plane. If this is
 * not the case, the user is responsible for transforming this
 * representation's matrix into the correct coordinate space (by judicious
 * matrix multiplication). Note that the transformation matrix returned by
 * GetTransform() is relative to the last PlaceWidget() invocation. (The
 * PlaceWidget() sets the origin around which rotation and scaling occurs;
 * the origin is the center point of the bounding box provided.)
 *
 *
 * @sa
 * svtkAffineRepresentation svtkAffineWidget
 */

#ifndef svtkAffineRepresentation2D_h
#define svtkAffineRepresentation2D_h

#include "svtkAffineRepresentation.h"
#include "svtkInteractionWidgetsModule.h" // For export macro

class svtkProperty2D;
class svtkActor2D;
class svtkPolyDataMapper2D;
class svtkPolyData;
class svtkPoints;
class svtkCellArray;
class svtkTextProperty;
class svtkLeaderActor2D;
class svtkTextMapper;
class svtkActor2D;

class SVTKINTERACTIONWIDGETS_EXPORT svtkAffineRepresentation2D : public svtkAffineRepresentation
{
public:
  /**
   * Instantiate this class.
   */
  static svtkAffineRepresentation2D* New();

  //@{
  /**
   * Standard methods for instances of this class.
   */
  svtkTypeMacro(svtkAffineRepresentation2D, svtkAffineRepresentation);
  void PrintSelf(ostream& os, svtkIndent indent) override;
  //@}

  //@{
  /**
   * Specify the width of the various parts of the representation (in
   * pixels).  The three parts are of the representation are the translation
   * axes, the rotation circle, and the scale/shear box. Note that since the
   * widget resizes itself so that the width and height are always the
   * same, only the width needs to be specified.
   */
  svtkSetClampMacro(BoxWidth, int, 10, SVTK_INT_MAX);
  svtkGetMacro(BoxWidth, int);
  svtkSetClampMacro(CircleWidth, int, 10, SVTK_INT_MAX);
  svtkGetMacro(CircleWidth, int);
  svtkSetClampMacro(AxesWidth, int, 10, SVTK_INT_MAX);
  svtkGetMacro(AxesWidth, int);
  //@}

  //@{
  /**
   * Specify the origin of the widget (in world coordinates). The origin
   * is the point where the widget places itself. Note that rotations and
   * scaling occurs around the origin.
   */
  void SetOrigin(const double o[3]) { this->SetOrigin(o[0], o[1], o[2]); }
  void SetOrigin(double ox, double oy, double oz);
  svtkGetVector3Macro(Origin, double);
  //@}

  /**
   * Retrieve a linear transform characterizing the affine transformation
   * generated by this widget. This method copies its internal transform into
   * the transform provided. Note that the PlaceWidget() method initializes
   * the internal matrix to identity. All subsequent widget operations (i.e.,
   * scale, translate, rotate, shear) are concatenated with the internal
   * transform.
   */
  void GetTransform(svtkTransform* t) override;

  //@{
  /**
   * Set/Get the properties when unselected and selected.
   */
  void SetProperty(svtkProperty2D*);
  void SetSelectedProperty(svtkProperty2D*);
  void SetTextProperty(svtkTextProperty*);
  svtkGetObjectMacro(Property, svtkProperty2D);
  svtkGetObjectMacro(SelectedProperty, svtkProperty2D);
  svtkGetObjectMacro(TextProperty, svtkTextProperty);
  //@}

  //@{
  /**
   * Enable the display of text with numeric values characterizing the
   * transformation. Rotation and shear are expressed in degrees; translation
   * the distance in world coordinates; and scale normalized (sx,sy) values.
   */
  svtkSetMacro(DisplayText, svtkTypeBool);
  svtkGetMacro(DisplayText, svtkTypeBool);
  svtkBooleanMacro(DisplayText, svtkTypeBool);
  //@}

  //@{
  /**
   * Subclasses of svtkAffineRepresentation2D must implement these methods. These
   * are the methods that the widget and its representation use to
   * communicate with each other. Note: PlaceWidget() reinitializes the
   * transformation matrix (i.e., sets it to identity). It also sets the
   * origin for scaling and rotation.
   */
  void PlaceWidget(double bounds[6]) override;
  void StartWidgetInteraction(double eventPos[2]) override;
  void WidgetInteraction(double eventPos[2]) override;
  void EndWidgetInteraction(double eventPos[2]) override;
  int ComputeInteractionState(int X, int Y, int modify = 0) override;
  void BuildRepresentation() override;
  //@}

  //@{
  /**
   * Methods to make this class behave as a svtkProp.
   */
  void ShallowCopy(svtkProp* prop) override;
  void GetActors2D(svtkPropCollection*) override;
  void ReleaseGraphicsResources(svtkWindow*) override;
  int RenderOverlay(svtkViewport* viewport) override;
  //@}

protected:
  svtkAffineRepresentation2D();
  ~svtkAffineRepresentation2D() override;

  // Methods to manipulate the cursor
  void Translate(double eventPos[2]);
  void Scale(double eventPos[2]);
  void Rotate(double eventPos[2]);
  void Shear(double eventPos[2]);
  void Highlight(int highlight) override;
  void UpdateText(const char* text, double eventPos[2]);

  // The width of the widget in normalized viewport coordinates.
  int BoxWidth;
  int CircleWidth;
  int AxesWidth;

  // Display text
  svtkTypeBool DisplayText;

  // Internal variables for bookkeeping (in display coordinates unless noted)
  double CurrentWidth;
  double CurrentRadius;
  double CurrentAxesWidth;

  // The internal transformation matrix
  svtkTransform* CurrentTransform;
  svtkTransform* TotalTransform;
  double Origin[4];             // the current origin in world coordinates
  double DisplayOrigin[3];      // the current origin in display coordinates
  double CurrentTranslation[3]; // translation this movement
  double StartWorldPosition[4]; // Start event position converted to world
  double StartAngle;            // The starting angle (always positive)
  double CurrentAngle;
  double CurrentScale[2];
  double CurrentShear[2];
  void ApplyShear(); // helper method to apply shear to matrix

  // Properties used to control the appearance of selected objects and
  // the manipulator in general.
  svtkProperty2D* Property;
  svtkProperty2D* SelectedProperty;
  svtkTextProperty* TextProperty;
  void CreateDefaultProperties();
  double Opacity;
  double SelectedOpacity;

  // Support picking
  double LastEventPosition[2];

  // These are the classes that form the geometric representation -----------
  // The label
  svtkTextMapper* TextMapper;
  svtkActor2D* TextActor;

  // The outer box
  svtkPoints* BoxPoints;
  svtkCellArray* BoxCellArray;
  svtkPolyData* Box;
  svtkPolyDataMapper2D* BoxMapper;
  svtkActor2D* BoxActor;

  svtkPoints* HBoxPoints;
  svtkCellArray* HBoxCellArray;
  svtkPolyData* HBox;
  svtkPolyDataMapper2D* HBoxMapper;
  svtkActor2D* HBoxActor;

  // The circle
  svtkPoints* CirclePoints;
  svtkCellArray* CircleCellArray;
  svtkPolyData* Circle;
  svtkPolyDataMapper2D* CircleMapper;
  svtkActor2D* CircleActor;

  svtkPoints* HCirclePoints;
  svtkCellArray* HCircleCellArray;
  svtkPolyData* HCircle;
  svtkPolyDataMapper2D* HCircleMapper;
  svtkActor2D* HCircleActor;

  // The translation axes
  svtkLeaderActor2D* XAxis;
  svtkLeaderActor2D* YAxis;
  svtkLeaderActor2D* HXAxis;
  svtkLeaderActor2D* HYAxis;

private:
  svtkAffineRepresentation2D(const svtkAffineRepresentation2D&) = delete;
  void operator=(const svtkAffineRepresentation2D&) = delete;
};

#endif
