/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkPointHandleRepresentation2D.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   svtkPointHandleRepresentation2D
 * @brief   represent the position of a point in display coordinates
 *
 * This class is used to represent a svtkHandleWidget. It represents a
 * position in 2D world coordinates using a x-y cursor (the cursor defined by
 * an instance of svtkPolyData and generated by a svtkPolyDataAlgorithm).
 *
 * @sa
 * svtkHandleRepresentation svtkHandleWidget
 */

#ifndef svtkPointHandleRepresentation2D_h
#define svtkPointHandleRepresentation2D_h

#include "svtkHandleRepresentation.h"
#include "svtkInteractionWidgetsModule.h" // For export macro

class svtkProperty2D;
class svtkActor2D;
class svtkCoordinate;
class svtkPolyDataMapper2D;
class svtkPolyData;
class svtkGlyph2D;
class svtkPoints;
class svtkPolyDataAlgorithm;
class svtkPointPlacer;

class SVTKINTERACTIONWIDGETS_EXPORT svtkPointHandleRepresentation2D : public svtkHandleRepresentation
{
public:
  /**
   * Instantiate this class.
   */
  static svtkPointHandleRepresentation2D* New();

  //@{
  /**
   * Standard methods for instances of this class.
   */
  svtkTypeMacro(svtkPointHandleRepresentation2D, svtkHandleRepresentation);
  void PrintSelf(ostream& os, svtkIndent indent) override;
  //@}

  using svtkHandleRepresentation::Translate;

  //@{
  /**
   * Specify the cursor shape with an instance of svtkPolyData. Note that
   * shape is assumed to be defined in the display coordinate system. By
   * default a svtkCursor2D shape is used.
   */
  void SetCursorShape(svtkPolyData* cursorShape);
  svtkPolyData* GetCursorShape();
  //@}

  /**
   * Set/Get the position of the point in display coordinates.  This overloads
   * the superclasses SetDisplayPosition in order to set the focal point
   * of the cursor.
   */
  void SetDisplayPosition(double xyz[3]) override;

  //@{
  /**
   * Set/Get the handle properties when unselected and selected.
   */
  void SetProperty(svtkProperty2D*);
  void SetSelectedProperty(svtkProperty2D*);
  svtkGetObjectMacro(Property, svtkProperty2D);
  svtkGetObjectMacro(SelectedProperty, svtkProperty2D);
  //@}

  //@{
  /**
   * Subclasses of svtkPointHandleRepresentation2D must implement these
   * methods. These are the methods that the widget and its representation
   * use to communicate with each other.
   */
  double* GetBounds() SVTK_SIZEHINT(6) override;
  void BuildRepresentation() override;
  void StartWidgetInteraction(double eventPos[2]) override;
  void WidgetInteraction(double eventPos[2]) override;
  int ComputeInteractionState(int X, int Y, int modify = 0) override;
  //@}

  //@{
  /**
   * Methods to make this class behave as a svtkProp.
   */
  void ShallowCopy(svtkProp* prop) override;
  void DeepCopy(svtkProp* prop) override;
  void GetActors2D(svtkPropCollection*) override;
  void ReleaseGraphicsResources(svtkWindow*) override;
  int RenderOverlay(svtkViewport* viewport) override;
  //@}

  void Highlight(int highlight) override;

  /**
   * Override the superclass implementation. This class does not use a
   * point placer. Point placers dictate the placement of points in 3D
   * space. Since this class constrains points to lie in an overlay
   * plane anyway, we don't care. Just returns.
   */
  void SetPointPlacer(svtkPointPlacer*) override;

  /**
   * Override to ensure that the internal actor's visibility is consistent with
   * this representation's visibility. Inconsistency between the two would cause
   * issues in picking logic which relies on individual view prop visibility to
   * determine whether the prop is pickable.
   */
  void SetVisibility(svtkTypeBool visible) override;

protected:
  svtkPointHandleRepresentation2D();
  ~svtkPointHandleRepresentation2D() override;

  // Render the cursor
  svtkActor2D* Actor;
  svtkCoordinate* MapperCoordinate;
  svtkPolyDataMapper2D* Mapper;
  svtkGlyph2D* Glypher;
  svtkPolyData* CursorShape;
  svtkPolyData* FocalData;
  svtkPoints* FocalPoint;

  // Support picking
  double LastPickPosition[3];
  double LastEventPosition[2];

  // Methods to manipulate the cursor
  virtual void Translate(const double* eventPos) override;
  void Scale(const double eventPos[2]);

  // Properties used to control the appearance of selected objects and
  // the manipulator in general.
  svtkProperty2D* Property;
  svtkProperty2D* SelectedProperty;
  void CreateDefaultProperties();

  // The size of the hot spot.
  int WaitingForMotion;
  int WaitCount;

private:
  svtkPointHandleRepresentation2D(const svtkPointHandleRepresentation2D&) = delete;
  void operator=(const svtkPointHandleRepresentation2D&) = delete;
};

#endif
