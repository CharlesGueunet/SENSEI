/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkOpenGLInstanceCulling.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

/**
 * @class   svtkOpenGLInstanceCulling
 * @brief   Frustum culling and LOD management.
 *
 * This class is used to cull instances based on their transformation matrix.
 * It was designed to improve performances when there is large number of instances
 * in svtkOpenGLGlyph3DMapper.
 *
 * Each instance is tested on the GPU through vertex shader to know if it is inside
 * of the frustum view. If it is, the distance to the camera is computed to select
 * and send to the geometry shader the corresponding LOD index.
 * The geometry shader register the instance to the corresponding vertex stream and
 * therefore the corresponding transform feedback buffer in video memory.
 *
 * @warning   GL_ARB_gpu_shader5 extension is required.
 *
 * @code{.cpp}
 *
 * svtkNew<svtkOpenGLInstanceCulling> culling;
 * svtkIdType nbInstances = 1000000;
 *
 * // buffer of size 16*nbInstances containing transform matrices.
 * svtkOpenGLBufferObject* bufferMatrix = ...;
 *
 * // buffer of size 4*nbInstances containing color buffer to pass through.
 * svtkOpenGLBufferObject* bufferColor = ...;
 *
 * // Initialize LODs
 * culling->InitLOD(polydata); // LOD0 : full geometry
 * culling->AddLOD(2.0, 0.5); // LOD1 : after 2.0, 50% triangles
 * culling->AddLOD(5.0, 0.99); // LOD2 : after 5.0, 1% triangles
 *
 * // Build shader and binds
 * culling->BuildCullingShaders(ren, actor, nbInstances);
 * culling->RunCullingShaders(nbInstances, bufferMatrix, bufferColor);
 *
 * // Get number of instances in LOD 0
 * int nbInstInLOD0 = culling->GetLOD(0).NumberOfInstances;
 *
 * // Get VBO and IBO of LOD 1
 * svtkOpenGLBufferObject* VBO1 = culling->GetLOD(1).PositionVBO;
 * svtkOpenGLBufferObject* IBO1 = culling->GetLOD(1).IBO;
 *
 * // Get instances buffer of LOD 2
 * // buffer is interleaved [ transformMatrix0 color0 transformMatrix1 color1 ... ]
 * svtkOpenGLBufferObject* buffer2 = culling->GetLODBuffer(2);
 *
 * @endcode
 */

#ifndef svtkOpenGLInstanceCulling_h
#define svtkOpenGLInstanceCulling_h

#include "svtkObject.h"
#include "svtkOpenGLHelper.h"           // For svtkOpenGLHelper
#include "svtkRenderingOpenGL2Module.h" // For export macro
#include "svtkSmartPointer.h"           // For smart pointer

#include <vector>

class svtkOpenGLIndexBufferObject;
class svtkOpenGLBufferObject;
class svtkPolyData;
class svtkOpenGLShaderCache;

class SVTKRENDERINGOPENGL2_EXPORT svtkOpenGLInstanceCulling : public svtkObject
{
public:
  static svtkOpenGLInstanceCulling* New();
  svtkTypeMacro(svtkOpenGLInstanceCulling, svtkObject);

  struct InstanceLOD
  {
    float Distance;
    unsigned int Query;
    svtkOpenGLIndexBufferObject* IBO;
    svtkOpenGLBufferObject* PositionVBO;
    svtkOpenGLBufferObject* NormalVBO;
    int NumberOfInstances;

    // used for sorting
    bool operator<(const InstanceLOD& other) const { return this->Distance < other.Distance; }
  };

  /**
   * Initialize LOD with a polydata
   */
  void InitLOD(svtkPolyData* pd);

  /**
   * Add a level of detail.
   * distance is the distance after which LOD is enabled
   * targetReduction is the reduction factor applied on polydata (svtkDecimatePro is used)
   *
   * @sa svtkDecimatePro::SetTargetReduction
   */
  void AddLOD(float distance, float targetReduction);

  /**
   * Build culling shader program (if not created yet) and binds it.
   */
  void BuildCullingShaders(svtkOpenGLShaderCache* cache, svtkIdType numInstances, bool withNormals);

  /**
   * Get helper structure.
   */
  svtkOpenGLHelper& GetHelper();

  /**
   * Get LOD structure.
   */
  InstanceLOD& GetLOD(svtkIdType index);

  /**
   * Get number of LOD currently declared.
   */
  svtkIdType GetNumberOfLOD();

  /**
   * Get the transform feedback buffer generated by the culling program.
   */
  svtkOpenGLBufferObject* GetLODBuffer(svtkIdType index);

  /**
   * Run the culling program and generate LOD buffers.
   */
  void RunCullingShaders(svtkIdType numInstances, svtkOpenGLBufferObject* matrixBuffer,
    svtkOpenGLBufferObject* colorBuffer, svtkOpenGLBufferObject* normalBuffer);

  //@{
  /**
   * Overload color with unique color per LOD.
   */
  svtkSetMacro(ColorLOD, bool);
  svtkGetMacro(ColorLOD, bool);
  //@}

protected:
  svtkOpenGLInstanceCulling() = default;
  ~svtkOpenGLInstanceCulling() override;

  void DeleteLODs();
  void UploadCurrentState(InstanceLOD& lod, svtkPolyData* pd);

private:
  svtkOpenGLInstanceCulling(const svtkOpenGLInstanceCulling&) = delete;
  void operator=(const svtkOpenGLInstanceCulling&) = delete;

  svtkOpenGLHelper CullingHelper;
  std::vector<InstanceLOD> LODList;
  svtkSmartPointer<svtkPolyData> PolyData;
  bool ColorLOD = false;
};

#endif // svtkOpenGLInstanceCulling_h

// SVTK-HeaderTest-Exclude: svtkOpenGLInstanceCulling.h
