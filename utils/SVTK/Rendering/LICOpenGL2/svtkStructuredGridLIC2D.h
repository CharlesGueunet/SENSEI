/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkStructuredGridLIC2D.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   svtkStructuredGridLIC2D
 *
 * GPU implementation of a Line Integral Convolution, a technique for
 * imaging vector fields.
 *
 * The input on port 0 is an 2D svtkStructuredGrid. It needs
 * a vector field on point data.
 * Port 1 is a special port for customized noise input. It is an optional port.
 * If not present, noise is generated by the filter. Even if none-power-of-two
 * texture are supported, giving a power-of-two image may result in faster
 * execution on the GPU.
 *
 * Please refer to Forssell, L. K., "Visualizing flow over curvilinear grid
 * surfaces using line integral convolution", Visualization 94 Conference
 * Proceedings, pages 240-247, IEEE Computer Society, 1994 for details of the
 * algorithm.
 *
 * @par Required OpenGL Extensions:
 * GL_ARB_texture_non_power_of_two
 * GL_VERSION_2_0
 * GL_ARB_texture_float
 * GL_ARB_draw_buffers
 * GL_EXT_framebuffer_object
 * GL_ARB_pixel_buffer_object
 */

#ifndef svtkStructuredGridLIC2D_h
#define svtkStructuredGridLIC2D_h

#include "svtkRenderingLICOpenGL2Module.h" // For export macro
#include "svtkStructuredGridAlgorithm.h"
#include "svtkWeakPointer.h" // needed for svtkWeakPointer.

class svtkImageNoiseSource;
class svtkOpenGLHelper;
class svtkRenderWindow;

class SVTKRENDERINGLICOPENGL2_EXPORT svtkStructuredGridLIC2D : public svtkStructuredGridAlgorithm
{
public:
  static svtkStructuredGridLIC2D* New();
  svtkTypeMacro(svtkStructuredGridLIC2D, svtkStructuredGridAlgorithm);
  void PrintSelf(ostream& os, svtkIndent indent) override;

  //@{
  /**
   * Get/Set the context. Context must be a svtkOpenGLRenderWindow.
   * This does not increase the reference count of the
   * context to avoid reference loops.
   * SetContext() may raise an error is the OpenGL context does not support the
   * required OpenGL extensions. Return 0 upon failure and 1 upon success.
   */
  int SetContext(svtkRenderWindow* context);
  svtkRenderWindow* GetContext();
  //@}

  //@{
  /**
   * Number of steps. Initial value is 1.
   * class invariant: Steps>0.
   * In term of visual quality, the greater the better.
   */
  svtkSetMacro(Steps, int);
  svtkGetMacro(Steps, int);
  //@}

  //@{
  /**
   * Step size.
   * WE ARE NOT SURE YET about the space where we define the step.
   * If the image data has different spacing in each dimension, it
   * is an issue.
   * Initial value is 1.0.
   * class invariant: StepSize>0.0.
   * In term of visual quality, the smaller the better.
   * The type for the interface is double as SVTK interface is double
   * but GPU only supports float. This value will be converted to
   * float in the execution of the algorithm.
   */
  svtkSetMacro(StepSize, double);
  svtkGetMacro(StepSize, double);
  //@}

  //@{
  /**
   * The magnification factor. Default is 1
   */
  svtkSetClampMacro(Magnification, int, 1, SVTK_INT_MAX);
  svtkGetMacro(Magnification, int);
  //@}

  /**
   * Check if FBO is started properly.
   */
  int GetFBOSuccess() { return this->FBOSuccess; }

  /**
   * Check if LIC runs properly.
   */
  int GetLICSuccess() { return this->LICSuccess; }

protected:
  svtkStructuredGridLIC2D();
  ~svtkStructuredGridLIC2D() override;

  /**
   * Fill the input port information objects for this algorithm.  This
   * is invoked by the first call to GetInputPortInformation for each
   * port so subclasses can specify what they can handle.
   * Redefined from the superclass.
   */
  int FillInputPortInformation(int port, svtkInformation* info) override;

  /**
   * Fill the output port information objects for this algorithm.
   * This is invoked by the first call to GetOutputPortInformation for
   * each port so subclasses can specify what they can handle.
   * Redefined from the superclass.
   */
  int FillOutputPortInformation(int port, svtkInformation* info) override;

  int RequestInformation(svtkInformation* request, svtkInformationVector** inputVector,
    svtkInformationVector* outputVector) override;

  int RequestUpdateExtent(svtkInformation* request, svtkInformationVector** inputVector,
    svtkInformationVector* outputVector) override;

  /**
   * Stolen from svtkImageAlgorithm. Should be in svtkStructuredGridAlgorithm.
   */
  void AllocateOutputData(svtkDataObject* output, svtkInformation* outInfo);

  /**
   * Stolen from svtkImageData. Should be in svtkStructuredGrid.
   */
  void AllocateScalars(svtkStructuredGrid* sg, svtkInformation* outInfo);

  /**
   * This is called by the superclass.
   * This is the method you should override.
   */
  int RequestData(svtkInformation* request, svtkInformationVector** inputVector,
    svtkInformationVector* outputVector) override;

  int Steps;
  double StepSize;
  int Magnification;
  svtkWeakPointer<svtkRenderWindow> Context;

  svtkImageNoiseSource* NoiseSource;
  bool OwnWindow;
  int FBOSuccess;
  int LICSuccess;
  svtkOpenGLHelper* LICProgram;

private:
  svtkStructuredGridLIC2D(const svtkStructuredGridLIC2D&) = delete;
  void operator=(const svtkStructuredGridLIC2D&) = delete;
};

#endif
