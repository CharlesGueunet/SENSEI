/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkXYPlotActor.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   svtkXYPlotActor
 * @brief   generate an x-y plot from input dataset(s) or field data
 *
 * svtkXYPlotActor creates an x-y plot of data from one or more input data
 * sets or field data. The class plots dataset scalar values (y-axis) against
 * the points (x-axis). The x-axis values are generated by taking the point
 * ids, computing a cumulative arc length, or a normalized arc length. More
 * than one input data set can be specified to generate multiple plots.
 * Alternatively, if field data is supplied as input, the class plots one
 * component against another. (The user must specify which component to use
 * as the x-axis and which for the y-axis.)
 *
 * To use this class to plot dataset(s), you must specify one or more
 * input datasets containing scalar and point data.  You'll probably also
 * want to invoke a method to control how the point coordinates are converted
 * into x values (by default point ids are used).
 *
 * To use this class to plot field data, you must specify one or more input
 * data objects with its associated field data. You'll also want to specify
 * which component to use as the x-axis and which to use as the y-axis.
 * Note that when plotting field data, the x and y values are used directly
 * (i.e., there are no options to normalize the components).
 *
 * Once you've set up the plot, you'll want to position it.  The
 * PositionCoordinate defines the lower-left location of the x-y plot
 * (specified in normalized viewport coordinates) and the Position2Coordinate
 * define the upper-right corner. (Note: the Position2Coordinate is relative
 * to PositionCoordinate, so you can move the svtkXYPlotActor around the
 * viewport by setting just the PositionCoordinate.) The combination of the
 * two position coordinates specifies a rectangle in which the plot will lie.
 *
 * Optional features include the ability to specify axes labels, label
 * format and plot title. You can also
 * manually specify the x and y plot ranges (by default they are computed
 * automatically). The Border instance variable is used to create space
 * between the boundary of the plot window (specified by PositionCoordinate
 * and Position2Coordinate) and the plot itself.
 *
 * The font property of the plot title can be modified through the
 * TitleTextProperty attribute.
 * The font property of the axes titles and labels can be modified through the
 * AxisTitleTextProperty and AxisLabelTextProperty attributes. You may also
 * use the GetXAxisActor2D or GetYAxisActor2D methods
 * to access each individual axis actor to modify their font properties.
 * In the same way, the GetLegendBoxActor method can be used to access
 * the legend box actor to modify its font properties.
 *
 * There are several advanced features as well. You can assign per curve
 * properties (such as color and a plot symbol). (Note that each input
 * dataset and/or data object creates a single curve.) Another option is to
 * add a plot legend that graphically indicates the correspondence between
 * the curve, curve symbols, and the data source. You can also exchange the
 * x and y axes if you prefer you plot orientation that way.
 *
 * @warning
 * If you are interested in plotting something other than scalar data, you
 * can use the svtk data shuffling filters (e.g.,
 * svtkAttributeDataToFieldDataFilter and svtkFieldDataToAttributeDataFilter)
 * to convert the data into scalar data and/or points.
 *
 * @par Thanks:
 * This class was written by:
 * Will Schroeder, Jim Miller, Charles Law, Sebastien Barre, Amy Squillacote,
 * Ken Martin, Mathieu Malaterre, Jeff Lee, Francois Finet, Julien Bertel,
 * Claire Guilbaud, and Philippe Pebay
 *
 * @sa
 * svtkActor2D svtkTextMapper svtkScalarBarActor svtkAxisActor2D svtkCubeAxesActor2D
 * svtkAttributeDataToFieldDataFilter svtkFieldDataToAttributeDataFilter
 * svtkTextProperty
 */

#ifndef svtkXYPlotActor_h
#define svtkXYPlotActor_h

#define SVTK_XYPLOT_INDEX 0
#define SVTK_XYPLOT_ARC_LENGTH 1
#define SVTK_XYPLOT_NORMALIZED_ARC_LENGTH 2
#define SVTK_XYPLOT_VALUE 3

#define SVTK_XYPLOT_ROW 0
#define SVTK_XYPLOT_COLUMN 1

#define SVTK_XYPLOT_Y_AXIS_TOP 0
#define SVTK_XYPLOT_Y_AXIS_HCENTER 1
#define SVTK_XYPLOT_Y_AXIS_VCENTER 2 // rotate by 90 degrees (y-axis aligned)

#include "svtkActor2D.h"
#include "svtkRenderingAnnotationModule.h" // For export macro
#include "svtkSmartPointer.h"              // For SP

class svtkXYPlotActorConnections;
class svtkAlgorithmOutput;
class svtkAppendPolyData;
class svtkAxisActor2D;
class svtkDataObject;
class svtkDataObjectCollection;
class svtkDataSet;
class svtkDataSetCollection;
class svtkDoubleArray;
class svtkGlyph2D;
class svtkGlyphSource2D;
class svtkIntArray;
class svtkLegendBoxActor;
class svtkPlanes;
class svtkPolyData;
class svtkPolyDataMapper2D;
class svtkTextActor;
class svtkTextMapper;
class svtkTextProperty;

class SVTKRENDERINGANNOTATION_EXPORT svtkXYPlotActor : public svtkActor2D
{
public:
  svtkTypeMacro(svtkXYPlotActor, svtkActor2D);
  void PrintSelf(ostream& os, svtkIndent indent) override;

  /**
   * Instantiate object with autorange computation; bold, italic, and shadows
   * on; arial font family; the number of labels set to 5 for the x and y
   * axes; a label format of "%-#6.3g"; and x coordinates computed from point
   * ids.
   */
  static svtkXYPlotActor* New();

  //---Data Set Input----------------------------------------------------------
  // The following methods are used to plot input datasets. Datasets
  // will be plotted if set as input; otherwise the input data objects
  // will be plotted (if defined).

  //@{
  /**
   * Add a dataset to the list of data to append. The array name specifies
   * which point array to plot. The array must be a svtkDataArray subclass, i.e.
   * a numeric array. If the array name is NULL, then the default
   * scalars are used.  The array can have multiple components, but only the
   * first component is ploted. Note that AddInputDataSet() does not setup
   * a pipeline connection whereas AddInputConnection() does.
   */
  void AddDataSetInput(svtkDataSet* ds, const char* arrayName, int component);
  void AddDataSetInput(svtkDataSet* ds) { this->AddDataSetInput(ds, nullptr, 0); }
  void AddDataSetInputConnection(svtkAlgorithmOutput* in, const char* arrayName, int component);
  void AddDataSetInputConnection(svtkAlgorithmOutput* in)
  {
    this->AddDataSetInputConnection(in, nullptr, 0);
  }
  //@}

  //@{
  /**
   * Remove a dataset from the list of data to append.
   */
  void RemoveDataSetInput(svtkDataSet* ds, const char* arrayName, int component);
  void RemoveDataSetInput(svtkDataSet* ds) { this->RemoveDataSetInput(ds, nullptr, 0); }
  void RemoveDataSetInputConnection(svtkAlgorithmOutput* in, const char* arrayName, int component);
  void RemoveDataSetInputConnection(svtkAlgorithmOutput* in)
  {
    this->RemoveDataSetInputConnection(in, nullptr, 0);
  }
  //@}

  /**
   * This removes all of the data set inputs,
   * but does not change the data object inputs.
   */
  void RemoveAllDataSetInputConnections();

  //@{
  /**
   * If plotting points by value, which component to use to determine the
   * value. This sets a value per each input dataset (i.e., the ith dataset).
   */
  void SetPointComponent(int i, int comp);
  int GetPointComponent(int i);
  //---end Data Set Input-----------------------------------------------------
  //@}

  //@{
  /**
   * Specify how the independent (x) variable is computed from the points.
   * The independent variable can be the scalar/point index (i.e., point id),
   * the accumulated arc length along the points, the normalized arc length,
   * or by component value. If plotting datasets (e.g., points), the value
   * that is used is specified by the PointComponent ivar.  (Note: these
   * methods also control how field data is plotted. Field data is usually
   * plotted by value or index, if plotting length 1-dimensional length
   * measures are used.)
   */
  svtkSetClampMacro(XValues, int, SVTK_XYPLOT_INDEX, SVTK_XYPLOT_VALUE);
  svtkGetMacro(XValues, int);
  void SetXValuesToIndex() { this->SetXValues(SVTK_XYPLOT_INDEX); }
  void SetXValuesToArcLength() { this->SetXValues(SVTK_XYPLOT_ARC_LENGTH); }
  void SetXValuesToNormalizedArcLength() { this->SetXValues(SVTK_XYPLOT_NORMALIZED_ARC_LENGTH); }
  void SetXValuesToValue() { this->SetXValues(SVTK_XYPLOT_VALUE); }
  const char* GetXValuesAsString();
  //@}

  //---Data Object Input------------------------------------------------------
  // The following methods are used to plot input data objects. Datasets will
  // be plotted in preference to data objects if set as input; otherwise the
  // input data objects will be plotted (if defined).

  //@{
  /**
   * Add a data object to the list of data to display.
   */
  void AddDataObjectInput(svtkDataObject* in);
  void AddDataObjectInputConnection(svtkAlgorithmOutput* alg);
  //@}

  //@{
  /**
   * Remove a dataset from the list of data to display.
   */
  void RemoveDataObjectInputConnection(svtkAlgorithmOutput* aout);
  void RemoveDataObjectInput(svtkDataObject* in);
  //@}

  //@{
  /**
   * Indicate whether to plot rows or columns. If plotting rows, then
   * the dependent variables is taken from a specified row,
   * versus rows (y).
   */
  svtkSetClampMacro(DataObjectPlotMode, int, SVTK_XYPLOT_ROW, SVTK_XYPLOT_COLUMN);
  svtkGetMacro(DataObjectPlotMode, int);
  void SetDataObjectPlotModeToRows() { this->SetDataObjectPlotMode(SVTK_XYPLOT_ROW); }
  void SetDataObjectPlotModeToColumns() { this->SetDataObjectPlotMode(SVTK_XYPLOT_COLUMN); }
  const char* GetDataObjectPlotModeAsString();
  //@}

  //@{
  /**
   * Specify which component of the input data object to use as the
   * independent variable for the ith input data object. (This ivar is
   * ignored if plotting the index.) Note that the value is interpreted
   * differently depending on DataObjectPlotMode. If the mode is Rows, then
   * the value of DataObjectXComponent is the row number; otherwise it's the
   * column number.
   */
  void SetDataObjectXComponent(int i, int comp);
  int GetDataObjectXComponent(int i);
  //@}

  //@{
  /**
   * Specify which component of the input data object to use as the
   * dependent variable for the ith input data object. (This ivar is
   * ignored if plotting the index.) Note that the value is interpreted
   * differently depending on DataObjectPlotMode. If the mode is Rows, then
   * the value of DataObjectYComponent is the row number; otherwise it's the
   * column number.
   */
  void SetDataObjectYComponent(int i, int comp);
  int GetDataObjectYComponent(int i);
  //---end Data Object Input--------------------------------------------------
  //@}

  //---Per Curve Properties---------------------------------------------------
  // The following methods are used to set properties on each curve that is
  // plotted. Each input dataset (or data object) results in one curve. The
  // methods that follow have an index i that corresponds to the input dataset
  // or data object.
  void SetPlotColor(int i, double r, double g, double b);
  void SetPlotColor(int i, const double color[3])
  {
    this->SetPlotColor(i, color[0], color[1], color[2]);
  }
  double* GetPlotColor(int i) SVTK_SIZEHINT(3);
  void SetPlotSymbol(int i, svtkPolyData* input);
  svtkPolyData* GetPlotSymbol(int i);
  void SetPlotLabel(int i, const char* label);
  const char* GetPlotLabel(int i);

  // Allow per-curve specification of line and point rendering.  These override
  // global settings PlotPoints and PlotLines.  If not on, the default behavior
  // is governed by PlotPoints and PlotLines ivars.
  svtkGetMacro(PlotCurvePoints, svtkTypeBool);
  svtkSetMacro(PlotCurvePoints, svtkTypeBool);
  svtkBooleanMacro(PlotCurvePoints, svtkTypeBool);

  svtkGetMacro(PlotCurveLines, svtkTypeBool);
  svtkSetMacro(PlotCurveLines, svtkTypeBool);
  svtkBooleanMacro(PlotCurveLines, svtkTypeBool);

  void SetPlotLines(int i, int);
  int GetPlotLines(int i);

  void SetPlotPoints(int i, int);
  int GetPlotPoints(int i);
  //---end Per Curve Properties-----------------------------------------------

  //@{
  /**
   * Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
   * vice-versa). Exchanging axes affects the labeling as well.
   */
  svtkSetMacro(ExchangeAxes, svtkTypeBool);
  svtkGetMacro(ExchangeAxes, svtkTypeBool);
  svtkBooleanMacro(ExchangeAxes, svtkTypeBool);
  //@}

  //@{
  /**
   * Normally the x-axis is plotted from minimum to maximum. Setting this instance
   * variable causes the x-axis to be plotted from maximum to minimum. Note that
   * boolean always applies to the x-axis even if ExchangeAxes is set.
   */
  svtkSetMacro(ReverseXAxis, svtkTypeBool);
  svtkGetMacro(ReverseXAxis, svtkTypeBool);
  svtkBooleanMacro(ReverseXAxis, svtkTypeBool);
  //@}

  //@{
  /**
   * Normally the y-axis is plotted from minimum to maximum. Setting this instance
   * variable causes the y-axis to be plotted from maximum to minimum. Note that
   * boolean always applies to the y-axis even if ExchangeAxes is set.
   */
  svtkSetMacro(ReverseYAxis, svtkTypeBool);
  svtkGetMacro(ReverseYAxis, svtkTypeBool);
  svtkBooleanMacro(ReverseYAxis, svtkTypeBool);
  //@}

  //@{
  /**
   * Retrieve handles to the legend box and glyph source. This is useful
   * if you would like to change the default behavior of the legend box
   * or glyph source. For example, the default glyph can be changed from
   * a line to a vertex plus line, etc.)
   */
  svtkGetObjectMacro(LegendActor, svtkLegendBoxActor);
  svtkGetObjectMacro(GlyphSource, svtkGlyphSource2D);
  //@}

  //@{
  /**
   * Set/Get the title of the x-y plot.
   */
  svtkSetStringMacro(Title);
  svtkGetStringMacro(Title);
  //@}

  //@{
  /**
   * Set/Get the title of the x axis
   */
  svtkSetStringMacro(XTitle);
  svtkGetStringMacro(XTitle);
  //@}

  //@{
  /**
   * Set/Get the title of the y axis
   */
  virtual void SetYTitle(const char*);
  char* GetYTitle();
  //@}

  //@{
  /**
   * Retrieve handles to the X and Y axis (so that you can set their text
   * properties for example)
   */
  svtkAxisActor2D* GetXAxisActor2D() { return this->XAxis; }
  svtkAxisActor2D* GetYAxisActor2D() { return this->YAxis; }
  //@}

  //@{
  /**
   * Set the plot range (range of independent and dependent variables)
   * to plot. Data outside of the range will be clipped. If the plot
   * range of either the x or y variables is set to (v1,v2), where
   * v1 == v2, then the range will be computed automatically. Note that
   * the x-range values should be consistent with the way the independent
   * variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
   */
  svtkSetVector2Macro(XRange, double);
  svtkGetVectorMacro(XRange, double, 2);
  svtkSetVector2Macro(YRange, double);
  svtkGetVectorMacro(YRange, double, 2);
  void SetPlotRange(double xmin, double ymin, double xmax, double ymax)
  {
    this->SetXRange(xmin, xmax);
    this->SetYRange(ymin, ymax);
  }
  //@}

  //@{
  /**
   * Set/Get the number of annotation labels to show along the x and y axes.
   * This values is a suggestion: the number of labels may vary depending
   * on the particulars of the data. The convenience method
   * SetNumberOfLabels() sets the number of x and y labels to the same value.
   */
  svtkSetClampMacro(NumberOfXLabels, int, 0, 50);
  svtkGetMacro(NumberOfXLabels, int);
  svtkSetClampMacro(NumberOfYLabels, int, 0, 50);
  svtkGetMacro(NumberOfYLabels, int);
  void SetNumberOfLabels(int num)
  {
    this->SetNumberOfXLabels(num);
    this->SetNumberOfYLabels(num);
  }
  //@}

  //@{
  /**
   * Set/Get the flag that controls whether the labels and ticks are
   * adjusted for "nice" numerical values to make it easier to read
   * the labels. The adjustment is based in the Range instance variable.
   * Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
   * range and number of labels.
   */
  void SetAdjustXLabels(int adjust);
  svtkGetMacro(AdjustXLabels, int);
  void SetAdjustYLabels(int adjust);
  svtkGetMacro(AdjustYLabels, int);
  //@}

  //@{
  /**
   * Set/Get the number of minor ticks in X or Y.
   */
  void SetNumberOfXMinorTicks(int num);
  int GetNumberOfXMinorTicks();
  void SetNumberOfYMinorTicks(int num);
  int GetNumberOfYMinorTicks();
  //@}

  //@{
  /**
   * Enable/Disable the creation of a legend. If on, the legend labels will
   * be created automatically unless the per plot legend symbol has been
   * set.
   */
  svtkSetMacro(Legend, svtkTypeBool);
  svtkGetMacro(Legend, svtkTypeBool);
  svtkBooleanMacro(Legend, svtkTypeBool);
  //@}

  //@{
  /**
   * Set/Get the position of the title. This has no effect if
   * AdjustTitlePosition is true.
   */
  svtkSetVector2Macro(TitlePosition, double);
  svtkGetVector2Macro(TitlePosition, double);
  //@}

  //@{
  /**
   * If true, the xyplot actor will adjust the position of the title
   * automatically to be upper-middle. Default is true.
   */
  svtkSetMacro(AdjustTitlePosition, svtkTypeBool);
  svtkGetMacro(AdjustTitlePosition, svtkTypeBool);
  svtkBooleanMacro(AdjustTitlePosition, svtkTypeBool);
  //@}

  enum Alignment
  {
    AlignLeft = 0x1,
    AlignRight = 0x2,
    AlignHCenter = 0x4,
    AlignTop = 0x10,
    AlignBottom = 0x20,
    AlignVCenter = 0x40,
    AlignAxisLeft = 0x100,
    AlignAxisRight = 0x200,
    AlignAxisHCenter = 0x400,
    AlignAxisTop = 0x1000,
    AlignAxisBottom = 0x2000,
    AlignAxisVCenter = 0x4000
  };

  //@{
  /**
   * If AdjustTitlePosition is true, the xyplot actor will
   * adjust the position of the title automatically depending on the
   * given mode, the mode is a combination of the Alignment flags.
   * by default: svtkXYPlotActor::AlignHCenter | svtkXYPlotActor::Top
   * | svtkXYPlotActor::AlignAxisVCenter
   */
  svtkSetMacro(AdjustTitlePositionMode, int);
  svtkGetMacro(AdjustTitlePositionMode, int);
  //@}

  //@{
  /**
   * Use these methods to control the position of the legend. The variables
   * LegendPosition and LegendPosition2 define the lower-left and upper-right
   * position of the legend. The coordinates are expressed as normalized
   * values with respect to the rectangle defined by PositionCoordinate and
   * Position2Coordinate. Note that LegendPosition2 is relative to
   * LegendPosition.
   */
  svtkSetVector2Macro(LegendPosition, double);
  svtkGetVector2Macro(LegendPosition, double);
  svtkSetVector2Macro(LegendPosition2, double);
  svtkGetVector2Macro(LegendPosition2, double);
  //@}

  //@{
  /**
   * Set/Get the title text property.
   */
  virtual void SetTitleTextProperty(svtkTextProperty* p);
  svtkGetObjectMacro(TitleTextProperty, svtkTextProperty);
  //@}

  //@{
  /**
   * Set/Get the title text property of all axes. Note that each axis can
   * be controlled individually through the GetX/YAxisActor2D() methods.
   */
  virtual void SetAxisTitleTextProperty(svtkTextProperty* p);
  svtkGetObjectMacro(AxisTitleTextProperty, svtkTextProperty);
  //@}

  //@{
  /**
   * Set/Get the labels text property of all axes. Note that each axis can
   * be controlled individually through the GetX/YAxisActor2D() methods.
   */
  virtual void SetAxisLabelTextProperty(svtkTextProperty* p);
  svtkGetObjectMacro(AxisLabelTextProperty, svtkTextProperty);
  //@}

  //@{
  /**
   * Enable/Disable plotting of Log of x-values.
   */
  svtkSetMacro(Logx, svtkTypeBool);
  svtkGetMacro(Logx, svtkTypeBool);
  svtkBooleanMacro(Logx, svtkTypeBool);
  //@}

  //@{
  /**
   * Set/Get the format with which to print the labels . This sets both X
   * and Y label formats. GetLabelFormat() returns X label format.
   */
  virtual void SetLabelFormat(const char*);
  const char* GetLabelFormat() { return this->GetXLabelFormat(); }
  //@}

  //@{
  /**
   * Set/Get the format with which to print the X label.
   */
  virtual void SetXLabelFormat(const char*);
  svtkGetStringMacro(XLabelFormat);
  //@}

  //@{
  /**
   * Set/Get the format with which to print the Y label.
   */
  virtual void SetYLabelFormat(const char*);
  svtkGetStringMacro(YLabelFormat);
  //@}

  //@{
  /**
   * Set/Get the spacing between the plot window and the plot. The value
   * is specified in pixels.
   */
  svtkSetClampMacro(Border, int, 0, 50);
  svtkGetMacro(Border, int);
  //@}

  //@{
  /**
   * Set/Get whether the points are rendered.  The point size can be set in
   * the property object. This is a global flag which affects the plot only
   * if per curve symbols are not defined.
   */
  svtkGetMacro(PlotPoints, svtkTypeBool);
  svtkSetMacro(PlotPoints, svtkTypeBool);
  svtkBooleanMacro(PlotPoints, svtkTypeBool);
  //@}

  //@{
  /**
   * Set/Get whether the lines are rendered.  The line width can be set in
   * the property object.
   */
  svtkGetMacro(PlotLines, svtkTypeBool);
  svtkSetMacro(PlotLines, svtkTypeBool);
  svtkBooleanMacro(PlotLines, svtkTypeBool);
  //@}

  //@{
  /**
   * Set/Get the factor that controls how big glyphs are in the plot.
   * The number is expressed as a fraction of the length of the diagonal
   * of the plot bounding box.
   */
  svtkSetClampMacro(GlyphSize, double, 0.0, 0.2);
  svtkGetMacro(GlyphSize, double);
  //@}

  /**
   * Given a position within the viewport used by the plot, return the
   * the plot coordinates (XAxis value, YAxis value)
   */
  void ViewportToPlotCoordinate(svtkViewport* viewport, double& u, double& v);

  //@{
  /**
   * An alternate form of ViewportToPlotCoordinate() above. This method
   * inputs the viewport coordinate pair (defined by the ivar
   * ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
   */
  void ViewportToPlotCoordinate(svtkViewport* viewport);
  svtkSetVector2Macro(PlotCoordinate, double);
  svtkGetVector2Macro(PlotCoordinate, double);
  //@}

  /**
   * Given a plot coordinate, return the viewpoint position
   */
  void PlotToViewportCoordinate(svtkViewport* viewport, double& u, double& v);

  //@{
  /**
   * An alternate form of PlotToViewportCoordinate() above. This method
   * inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
   * and then stores them in the ivar ViewportCoordinate. (This method
   * can be wrapped.)
   */
  void PlotToViewportCoordinate(svtkViewport* viewport);
  svtkSetVector2Macro(ViewportCoordinate, double);
  svtkGetVector2Macro(ViewportCoordinate, double);
  //@}

  /**
   * Is the specified viewport position within the plot area (as opposed to the
   * region used by the plot plus the labels)?
   */
  int IsInPlot(svtkViewport* viewport, double u, double v);

  //@{
  /**
   * Set/Get the flag that controls whether a box will be drawn/filled
   * corresponding to the chart box.
   */
  svtkSetMacro(ChartBox, svtkTypeBool);
  svtkGetMacro(ChartBox, svtkTypeBool);
  svtkBooleanMacro(ChartBox, svtkTypeBool);
  //@}

  //@{
  /**
   * Set/Get the flag that controls whether a box will be drawn/filled
   * corresponding to the legend box.
   */
  svtkSetMacro(ChartBorder, svtkTypeBool);
  svtkGetMacro(ChartBorder, svtkTypeBool);
  svtkBooleanMacro(ChartBorder, svtkTypeBool);
  //@}

  /**
   * Get the box svtkProperty2D.
   */
  svtkProperty2D* GetChartBoxProperty() { return this->ChartBoxActor->GetProperty(); }

  //@{
  /**
   * Set/Get if the X reference line is visible. hidden by default
   */
  svtkSetMacro(ShowReferenceXLine, svtkTypeBool);
  svtkGetMacro(ShowReferenceXLine, svtkTypeBool);
  svtkBooleanMacro(ShowReferenceXLine, svtkTypeBool);
  //@}

  //@{
  /**
   * Set/Get the value for the X reference line
   */
  svtkSetMacro(ReferenceXValue, double);
  svtkGetMacro(ReferenceXValue, double);
  //@}

  //@{
  /**
   * Set/Get if the Y reference line is visible. hidden by default
   */
  svtkSetMacro(ShowReferenceYLine, svtkTypeBool);
  svtkGetMacro(ShowReferenceYLine, svtkTypeBool);
  svtkBooleanMacro(ShowReferenceYLine, svtkTypeBool);
  //@}

  //@{
  /**
   * Set/Get the value for the Y reference line
   */
  svtkSetMacro(ReferenceYValue, double);
  svtkGetMacro(ReferenceYValue, double);
  //@}

  /**
   * Take into account the modified time of internal helper classes.
   */
  svtkMTimeType GetMTime() override;

  /**
   * Write the XY Ploat Actor as a CSV (comma separated value) representation.
   */
  void PrintAsCSV(ostream& os);

  //@{
  /**
   * WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
   * DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS.
   * Draw the x-y plot.
   */
  int RenderOpaqueGeometry(svtkViewport*) override;
  int RenderOverlay(svtkViewport*) override;
  int RenderTranslucentPolygonalGeometry(svtkViewport*) override { return 0; }
  //@}

  /**
   * Does this prop have some translucent polygonal geometry?
   */
  svtkTypeBool HasTranslucentPolygonalGeometry() override;

  /**
   * Release any graphics resources that are being consumed by this actor.
   * The parameter window could be used to determine which graphic
   * resources to release.
   */
  void ReleaseGraphicsResources(svtkWindow*) override;

  //@{
  /**
   * Set/Get the position of the title of X axis.
   */
  void SetXTitlePosition(double position);
  double GetXTitlePosition();
  //@}

  //@{
  /**
   * Set/Get the position of the title of Y axis.
   */
  svtkSetMacro(YTitlePosition, int);
  svtkGetMacro(YTitlePosition, int);
  void SetYTitlePositionToTop() { this->SetYTitlePosition(SVTK_XYPLOT_Y_AXIS_TOP); }
  void SetYTitlePositionToHCenter() { this->SetYTitlePosition(SVTK_XYPLOT_Y_AXIS_HCENTER); }
  void SetYTitlePositionToVCenter() { this->SetYTitlePosition(SVTK_XYPLOT_Y_AXIS_VCENTER); }
  //@}

  //@{
  /**
   * Set plot properties
   */
  virtual void SetPlotGlyphType(int, int);
  virtual void SetLineWidth(double);
  virtual void AddUserCurvesPoint(double, double, double);
  virtual void RemoveAllActiveCurves();
  //@}

  //@{
  /**
   * Set legend properties
   */
  virtual void SetLegendBorder(int);
  virtual void SetLegendBox(int);
  virtual void SetLegendUseBackground(int);
  virtual void SetLegendBackgroundColor(double, double, double);
  //@}

  //@{
  /**
   * Set title properties
   */
  virtual void SetTitleColor(double, double, double);
  virtual void SetTitleFontFamily(int);
  virtual void SetTitleBold(int);
  virtual void SetTitleItalic(int);
  virtual void SetTitleShadow(int);
  virtual void SetTitleFontSize(int);
  virtual void SetTitleJustification(int);
  virtual void SetTitleVerticalJustification(int);
  //@}

  //@{
  /**
   * Set axes properties
   */
  virtual void SetXAxisColor(double, double, double);
  virtual void SetYAxisColor(double, double, double);
  //@}

  //@{
  /**
   * Set axis title properties
   */
  virtual void SetAxisTitleColor(double, double, double);
  virtual void SetAxisTitleFontFamily(int);
  virtual void SetAxisTitleBold(int);
  virtual void SetAxisTitleItalic(int);
  virtual void SetAxisTitleShadow(int);
  virtual void SetAxisTitleFontSize(int);
  virtual void SetAxisTitleJustification(int);
  virtual void SetAxisTitleVerticalJustification(int);
  //@}

  //@{
  /**
   * Set axis label properties
   */
  virtual void SetAxisLabelColor(double, double, double);
  virtual void SetAxisLabelFontFamily(int);
  virtual void SetAxisLabelBold(int);
  virtual void SetAxisLabelItalic(int);
  virtual void SetAxisLabelShadow(int);
  virtual void SetAxisLabelFontSize(int);
  virtual void SetAxisLabelJustification(int);
  virtual void SetAxisLabelVerticalJustification(int);
  //@}

protected:
  svtkXYPlotActor();
  ~svtkXYPlotActor() override;

  svtkXYPlotActorConnections* InputConnectionHolder;
  char** SelectedInputScalars;                                // list of data set arrays to plot
  svtkIntArray* SelectedInputScalarsComponent;                 // list of components
  svtkXYPlotActorConnections* DataObjectInputConnectionHolder; // list of data objects to plot
  char* Title;
  char* XTitle;
  svtkTextActor* YTitleActor;
  int XValues;
  int NumberOfXLabels;
  int NumberOfYLabels;
  svtkTypeBool Logx;
  char* XLabelFormat;
  char* YLabelFormat;
  double XRange[2];
  double YRange[2];
  double XComputedRange[2]; // range actually used by plot
  double YComputedRange[2]; // range actually used by plot
  int Border;
  svtkTypeBool PlotLines;
  svtkTypeBool PlotPoints;
  svtkTypeBool PlotCurveLines;
  svtkTypeBool PlotCurvePoints;
  svtkTypeBool ExchangeAxes;
  svtkTypeBool ReverseXAxis;
  svtkTypeBool ReverseYAxis;
  int AdjustXLabels;
  int AdjustYLabels;
  svtkTypeBool AdjustTitlePosition;
  double TitlePosition[2];
  int AdjustTitlePositionMode;

  svtkTextMapper* TitleMapper;
  svtkActor2D* TitleActor;
  svtkTextProperty* TitleTextProperty;

  svtkAxisActor2D* XAxis;
  svtkAxisActor2D* YAxis;

  svtkTextProperty* AxisTitleTextProperty;
  svtkTextProperty* AxisLabelTextProperty;

  double ViewportCoordinate[2];
  double PlotCoordinate[2];

  // Handle data objects and datasets
  int DataObjectPlotMode;
  svtkIntArray* XComponent;
  svtkIntArray* YComponent;
  svtkIntArray* LinesOn;
  svtkIntArray* PointsOn;

  // The data drawn within the axes. Each curve is one polydata.
  // color is controlled by scalar data. The curves are appended
  // together, possibly glyphed with point symbols.
  int NumberOfInputs;
  svtkPolyData** PlotData;
  svtkGlyph2D** PlotGlyph;
  svtkAppendPolyData** PlotAppend;
  svtkPolyDataMapper2D** PlotMapper;
  svtkActor2D** PlotActor;
  void InitializeEntries();

  // Legends and plot symbols. The legend also keeps track of
  // the symbols and such.
  svtkTypeBool Legend;
  double LegendPosition[2];
  double LegendPosition2[2];
  svtkLegendBoxActor* LegendActor;
  svtkGlyphSource2D* GlyphSource;
  svtkPlanes* ClipPlanes;
  double GlyphSize;

  // Background box
  svtkTypeBool ChartBox;
  svtkPolyData* ChartBoxPolyData;
  svtkPolyDataMapper2D* ChartBoxMapper;
  svtkActor2D* ChartBoxActor;
  svtkTypeBool ChartBorder;
  svtkPolyData* ChartBorderPolyData;
  svtkPolyDataMapper2D* ChartBorderMapper;
  svtkActor2D* ChartBorderActor;

  // Reference lines
  svtkTypeBool ShowReferenceXLine;
  svtkTypeBool ShowReferenceYLine;
  double ReferenceXValue;
  double ReferenceYValue;

  svtkPolyData* ReferenceLinesPolyData;
  svtkPolyDataMapper2D* ReferenceLinesMapper;
  svtkActor2D* ReferenceLinesActor;

  // Keep track of changes.
  int CachedSize[2];
  svtkTimeStamp BuildTime;

  void ComputeXRange(double range[2], double* lengths);
  void ComputeYRange(double range[2]);
  void ComputeDORange(double xrange[2], double yrange[2], double* lengths);

  virtual void CreatePlotData(
    int* pos, int* pos2, double xRange[2], double yRange[2], double* norms, int numDS, int numDO);
  void PlaceAxes(svtkViewport* viewport, const int* size, int pos[2], int pos2[2]);
  void GenerateClipPlanes(int* pos, int* pos2);
  double ComputeGlyphScale(int i, int* pos, int* pos2);
  void ClipPlotData(int* pos, int* pos2, svtkPolyData* pd);
  double* TransformPoint(int pos[2], int pos2[2], double x[3], double xNew[3]);

  svtkSmartPointer<svtkDoubleArray> ActiveCurve;

  int YAxisTitleSize;
  int ActiveCurveIndex;
  int PlotColorIndex;

private:
  svtkXYPlotActor(const svtkXYPlotActor&) = delete;
  void operator=(const svtkXYPlotActor&) = delete;

  bool DoesConnectionMatch(int i, svtkAlgorithmOutput* in);

  int IsInputPresent(svtkAlgorithmOutput* in, const char* arrayName, int component);

  /**
   * Estimated sizes of Y axis title
   */
  int YTitleSize[2];

  /**
   * Position and orientation of Y axis title
   */
  int YTitlePosition;

  //@{
  /**
   * Estimated size of Y axis spacing
   */
  int YTitleDelta;
  //@}
};

#endif
