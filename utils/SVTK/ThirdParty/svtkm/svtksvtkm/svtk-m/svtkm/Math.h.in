//============================================================================
//  Copyright (c) Kitware, Inc.
//  All rights reserved.
//  See LICENSE.txt for details.
//
//  This software is distributed WITHOUT ANY WARRANTY; without even
//  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//  PURPOSE.  See the above copyright notice for more information.
//============================================================================
$# This file uses the pyexpander macro processing utility to build the
$# FunctionInterface facilities that use a variable number of arguments.
$# Information, documentation, and downloads for pyexpander can be found at:
$#
$#     http://pyexpander.sourceforge.net/
$#
$# To build the source code, execute the following (after installing
$# pyexpander, of course):
$#
$#     expander.py Math.h.in > Math.h
$#
$# Ignore the following comment. It is meant for the generated file.
// **** DO NOT EDIT THIS FILE!!! ****
// This file is automatically generated by Math.h.in

#ifndef svtk_m_Math_h
#define svtk_m_Math_h

#include <svtkm/TypeTraits.h>
#include <svtkm/Types.h>
#include <svtkm/VecTraits.h>

#ifndef SVTKM_CUDA
#include <cmath>
#include <limits.h>
#include <math.h>
#include <stdlib.h>
#endif // !SVTKM_CUDA

#if !defined(SVTKM_CUDA_DEVICE_PASS)
#define SVTKM_USE_STL
#include <algorithm>
#endif

#ifdef SVTKM_MSVC
#include <intrin.h>                // For bitwise intrinsics (__popcnt, etc)
#include <svtkm/internal/Windows.h> // for types used by MSVC intrinsics.
#ifndef SVTKM_CUDA
#include <math.h>
#endif // SVTKM_CUDA
#endif // SVTKM_MSVC

#define SVTKM_CUDA_MATH_FUNCTION_32(func) func##f
#define SVTKM_CUDA_MATH_FUNCTION_64(func) func

$py(
def unary_function(name, type, returntype, cuda_expression, std_expression, template_header, static_keywords):
  return '''{5}
{6} SVTKM_EXEC_CONT {2} {0}({1} x)
{{
#ifdef SVTKM_CUDA
  return {3};
#else
  return {4};
#endif
}}
'''.format(name, type, returntype, cuda_expression, std_expression, template_header, static_keywords)

def unary_Vec_function(svtkmname):
  return '''template <typename T, svtkm::IdComponent N>
static inline SVTKM_EXEC_CONT svtkm::Vec<typename detail::FloatingPointReturnType<T>::Type, N> {0}(
  const svtkm::Vec<T, N>& x)
{{
  svtkm::Vec<typename detail::FloatingPointReturnType<T>::Type, N> result;
  for (svtkm::IdComponent index = 0; index < N; index++)
  {{
    result[index] = svtkm::{0}(x[index]);
  }}
  return result;
}}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Vec<typename detail::FloatingPointReturnType<T>::Type, 4> {0}(
  const svtkm::Vec<T, 4>& x)
{{
  return svtkm::Vec<typename detail::FloatingPointReturnType<T>::Type, 4>(
    svtkm::{0}(x[0]), svtkm::{0}(x[1]), svtkm::{0}(x[2]), svtkm::{0}(x[3]));
}}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Vec<typename detail::FloatingPointReturnType<T>::Type, 3> {0}(
  const svtkm::Vec<T, 3>& x)
{{
  return svtkm::Vec<typename detail::FloatingPointReturnType<T>::Type, 3>(
    svtkm::{0}(x[0]), svtkm::{0}(x[1]), svtkm::{0}(x[2]));
}}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Vec<typename detail::FloatingPointReturnType<T>::Type, 2> {0}(
  const svtkm::Vec<T, 2>& x)
{{
  return svtkm::Vec<typename detail::FloatingPointReturnType<T>::Type, 2>(svtkm::{0}(x[0]),
                                                                         svtkm::{0}(x[1]));
}}
'''.format(svtkmname)

def unary_math_function_no_vec(svtkmname, sysname):
  general_type = '''template <typename T>
static inline SVTKM_EXEC_CONT typename detail::FloatingPointReturnType<T>::Type {0}(const T& x)
{{
  using RT = typename detail::FloatingPointReturnType<T>::Type;
  return svtkm::{0}(static_cast<RT>(x));
}}
'''.format(svtkmname)
  specialization_types = unary_function(svtkmname,
                                        'svtkm::Float32',
                                        'svtkm::Float32',
                                        'SVTKM_CUDA_MATH_FUNCTION_32(' + sysname + ')(x)',
                                        'std::' + sysname + '(x)',
                                        '',
                                        'inline')
  specialization_types += unary_function(svtkmname,
                                         'svtkm::Float64',
                                         'svtkm::Float64',
                                         'SVTKM_CUDA_MATH_FUNCTION_64(' + sysname + ')(x)',
                                         'std::' + sysname + '(x)',
                                         '',
                                         'inline')
  return specialization_types + general_type


def unary_math_function(svtkmname, sysname):
  return unary_math_function_no_vec(svtkmname, sysname) + \
         unary_Vec_function(svtkmname)

def unary_template_function_no_vec(svtkmname,
                                   expression,
                                   returntype = None,
                                   preexpression = ''):
  return '''static inline SVTKM_EXEC_CONT {2} {0}(svtkm::Float32 x)
{{
{3}  return {1};
}}
'''.format(svtkmname,
           expression,
           'svtkm::Float32' if returntype == None else returntype,
           preexpression) + \
'''static inline SVTKM_EXEC_CONT {2} {0}(svtkm::Float64 x)
{{
{3}  return {1};
}}
'''.format(svtkmname,
           expression,
           'svtkm::Float64' if returntype == None else returntype,
           preexpression)

def binary_function(name, type, cuda_expression, std_expression):
  return '''static inline SVTKM_EXEC_CONT {1} {0}({1} x, {1} y)
{{
#ifdef SVTKM_CUDA
  return {2};
#else
  return {3};
#endif
}}
'''.format(name, type, cuda_expression, std_expression)

def binary_math_function(svtkmname, sysname):
  return binary_function(svtkmname,
                         'svtkm::Float32',
                         'SVTKM_CUDA_MATH_FUNCTION_32(' + sysname + ')(x, y)',
                         'std::' + sysname + '(x, y)') + \
         binary_function(svtkmname,
                         'svtkm::Float64',
                         'SVTKM_CUDA_MATH_FUNCTION_64(' + sysname + ')(x, y)',
                         'std::' + sysname + '(x, y)')

def binary_template_function(svtkmname, expression):
  return '''static inline SVTKM_EXEC_CONT svtkm::Float32 {0}(svtkm::Float32 x, svtkm::Float32 y)
{{
  return {1};
}}
static inline SVTKM_EXEC_CONT svtkm::Float64 {0}(svtkm::Float64 x, svtkm::Float64 y)
{{
  return {1};
}}
'''.format(svtkmname, expression)

def unary_pi_related_function_no_vec(svtkmname):
  return '''template <typename T>
  static constexpr inline SVTKM_EXEC_CONT auto {0}() -> typename detail::FloatingPointReturnType<T>::Type
  {{
    using FT = typename detail::FloatingPointReturnType<T>::Type;
    using RAFT = typename detail::FloatingPointReturnType<T>::representable_as_float_type;
    return static_cast<FT>(RAFT::value ? {0}f() : {0}());
  }}
'''.format(svtkmname)
)\
$extend(unary_math_function)\
$extend(unary_math_function_no_vec)\
$extend(unary_Vec_function)\
$extend(unary_template_function_no_vec)\
$extend(binary_math_function)\
$extend(binary_template_function)\
$extend(unary_pi_related_function_no_vec)\
\
// clang-format off
namespace svtkm
{

//-----------------------------------------------------------------------------
namespace detail
{
template <typename T>
struct FloatingPointReturnType
{
  using ctype = typename svtkm::VecTraits<T>::ComponentType;
  using representable_as_float_type = std::integral_constant<bool,
                      ((sizeof(ctype) < sizeof(float)) || std::is_same<ctype, svtkm::Float32>::value)>;
  using Type = typename std::conditional<representable_as_float_type::value,
                                         svtkm::Float32,
                                         svtkm::Float64>::type;
};
} // namespace detail

/// Returns the constant 2 times Pi in float32.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float32 TwoPif()
{
  return 6.28318530717958647692528676655900576f;
}

/// Returns the constant Pi in float32.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float32 Pif()
{
  return 3.14159265358979323846264338327950288f;
}

/// Returns the constant Pi halves in float32.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float32 Pi_2f()
{
  return 1.57079632679489661923132169163975144f;
}

/// Returns the constant Pi thirds in float32.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float32 Pi_3f()
{
  return 1.04719755119659774615421446109316762f;
}

/// Returns the constant Pi fourths in float32.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float32 Pi_4f()
{
  return 0.78539816339744830961566084581987572f;
}

/// Returns the constant Pi one hundred and eightieth in float32.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float32 Pi_180f()
{
  return 0.01745329251994329547437168059786927f;
}

/// Returns the constant 2 times Pi in float64.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float64 TwoPi()
{
  return 6.28318530717958647692528676655900576;
}

/// Returns the constant Pi in float64.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float64 Pi()
{
  return 3.14159265358979323846264338327950288;
}

/// Returns the constant Pi halves in float64.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float64 Pi_2()
{
  return 1.57079632679489661923132169163975144;
}

/// Returns the constant Pi thirds in float64.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float64 Pi_3()
{
  return 1.04719755119659774615421446109316762;
}

/// Returns the constant Pi fourths in float64.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float64 Pi_4()
{
  return 0.78539816339744830961566084581987572;
}

/// Returns the constant Pi one hundred and eightieth in float64.
///
static constexpr inline SVTKM_EXEC_CONT svtkm::Float64 Pi_180()
{
  return 0.01745329251994329547437168059786927;
}

/// Returns the constant 2 times Pi.
///
$unary_pi_related_function_no_vec('TwoPi')\

/// Returns the constant Pi.
///
$unary_pi_related_function_no_vec('Pi')\

/// Returns the constant Pi halves.
///
$unary_pi_related_function_no_vec('Pi_2')\

/// Returns the constant Pi thirds.
///
$unary_pi_related_function_no_vec('Pi_3')\

/// Returns the constant Pi fourths.
///
$unary_pi_related_function_no_vec('Pi_4')\
/// Returns the constant Pi one hundred and eightieth.
///
$unary_pi_related_function_no_vec('Pi_180')\

/// Compute the sine of \p x.
///
$unary_math_function('Sin', 'sin')\

/// Compute the cosine of \p x.
///
$unary_math_function('Cos', 'cos')\

/// Compute the tangent of \p x.
///
$unary_math_function('Tan', 'tan')\

/// Compute the arc sine of \p x.
///
$unary_math_function('ASin', 'asin')\

/// Compute the arc cosine of \p x.
///
$unary_math_function('ACos', 'acos')\

/// Compute the arc tangent of \p x.
///
$unary_math_function('ATan', 'atan')\

/// Compute the arc tangent of \p x / \p y using the signs of both arguments
/// to determine the quadrant of the return value.
///
$binary_math_function('ATan2', 'atan2')\

/// Compute the hyperbolic sine of \p x.
///
$unary_math_function('SinH', 'sinh')\

/// Compute the hyperbolic cosine of \p x.
///
$unary_math_function('CosH', 'cosh')\

/// Compute the hyperbolic tangent of \p x.
///
$unary_math_function('TanH', 'tanh')\

/// Compute the hyperbolic arc sine of \p x.
///
$unary_math_function_no_vec('ASinH', 'asinh')\
$#
$unary_Vec_function('ASinH')\

/// Compute the hyperbolic arc cosine of \p x.
///
$unary_math_function_no_vec('ACosH', 'acosh')\
$#
$unary_Vec_function('ACosH')\

/// Compute the hyperbolic arc tangent of \p x.
///
$unary_math_function_no_vec('ATanH', 'atanh')\
$#
$unary_Vec_function('ATanH')\

//-----------------------------------------------------------------------------
/// Computes \p x raised to the power of \p y.
///
$binary_math_function('Pow', 'pow')\

/// Compute the square root of \p x.
///
$unary_math_function('Sqrt', 'sqrt')\

/// Compute the reciprocal square root of \p x. The result of this function is
/// equivalent to <tt>1/Sqrt(x)</tt>. However, on some devices it is faster to
/// compute the reciprocal square root than the regular square root. Thus, you
/// should use this function whenever dividing by the square root.
///
#ifdef SVTKM_CUDA
static inline SVTKM_EXEC_CONT svtkm::Float32 RSqrt(svtkm::Float32 x)
{
  return rsqrtf(x);
}
static inline SVTKM_EXEC_CONT svtkm::Float64 RSqrt(svtkm::Float64 x)
{
  return rsqrt(x);
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Float64 RSqrt(T x)
{
  return rsqrt(static_cast<svtkm::Float64>(x));
}
#else  // !SVTKM_CUDA
static inline SVTKM_EXEC_CONT svtkm::Float32 RSqrt(svtkm::Float32 x)
{
  return 1 / svtkm::Sqrt(x);
}
static inline SVTKM_EXEC_CONT svtkm::Float64 RSqrt(svtkm::Float64 x)
{
  return 1 / svtkm::Sqrt(x);
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Float64 RSqrt(T x)
{
  return 1 / static_cast<svtkm::Float64>(x);
}
#endif // !SVTKM_CUDA

$unary_Vec_function('RSqrt')\

/// Compute the cube root of \p x.
///
$unary_math_function_no_vec('Cbrt', 'cbrt')\
$#
$unary_Vec_function('Cbrt')\

/// Compute the reciprocal cube root of \p x. The result of this function is
/// equivalent to <tt>1/Cbrt(x)</tt>. However, on some devices it is faster to
/// compute the reciprocal cube root than the regular cube root. Thus, you
/// should use this function whenever dividing by the cube root.
///
#ifdef SVTKM_CUDA
static inline SVTKM_EXEC_CONT svtkm::Float32 RCbrt(svtkm::Float32 x)
{
  return rcbrtf(x);
}
static inline SVTKM_EXEC_CONT svtkm::Float64 RCbrt(svtkm::Float64 x)
{
  return rcbrt(x);
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Float64 RCbrt(T x)
{
  return rcbrt(static_cast<svtkm::Float64>(x));
}
#else  // !SVTKM_CUDA
static inline SVTKM_EXEC_CONT svtkm::Float32 RCbrt(svtkm::Float32 x)
{
  return 1 / svtkm::Cbrt(x);
}
static inline SVTKM_EXEC_CONT svtkm::Float64 RCbrt(svtkm::Float64 x)
{
  return 1 / svtkm::Cbrt(x);
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Float64 RCbrt(T x)
{
  return 1 / svtkm::Cbrt(static_cast<svtkm::Float64>(x));
}
#endif // !SVTKM_CUDA

$unary_Vec_function('RCbrt')\

/// Computes e**\p x, the base-e exponential of \p x.
///
$unary_math_function('Exp', 'exp')\

/// Computes 2**\p x, the base-2 exponential of \p x.
///
$unary_math_function_no_vec('Exp2', 'exp2')\
$#
$unary_Vec_function('Exp2')\

/// Computes (e**\p x) - 1, the of base-e exponental of \p x then minus 1. The
/// accuracy of this function is good even for very small values of x.
///
$unary_math_function_no_vec('ExpM1', 'expm1')\
$#
$unary_Vec_function('ExpM1')\

/// Computes 10**\p x, the base-10 exponential of \p x.
///
#ifdef SVTKM_CUDA
static inline SVTKM_EXEC_CONT svtkm::Float32 Exp10(svtkm::Float32 x)
{
  return exp10f(x);
}
static inline SVTKM_EXEC_CONT svtkm::Float64 Exp10(svtkm::Float64 x)
{
  return exp10(x);
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Float64 Exp10(T x)
{
  return exp10(static_cast<svtkm::Float64>(x));
}
#else  // !SVTKM_CUDA
static inline SVTKM_EXEC_CONT svtkm::Float32 Exp10(svtkm::Float32 x)
{
  return svtkm::Pow(10, x);
}
static inline SVTKM_EXEC_CONT svtkm::Float64 Exp10(svtkm::Float64 x)
{
  return svtkm::Pow(10, x);
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Float64 Exp10(T x)
{
  return svtkm::Pow(10, static_cast<svtkm::Float64>(x));
}
#endif // !SVTKM_CUDA

$unary_Vec_function('Exp10')\

/// Computes the natural logarithm of \p x.
///
$unary_math_function('Log', 'log')\

/// Computes the logarithm base 2 of \p x.
///
$unary_math_function_no_vec('Log2', 'log2')\
$#
$unary_Vec_function('Log2')\

/// Computes the logarithm base 10 of \p x.
///
$unary_math_function('Log10', 'log10')\

/// Computes the value of log(1+x) accurately for very small values of x.
///
$unary_math_function_no_vec('Log1P', 'log1p')\
$#
$unary_Vec_function('Log1P')\

//-----------------------------------------------------------------------------
/// Returns \p x or \p y, whichever is larger.
///
template <typename T>
static inline SVTKM_EXEC_CONT T Max(const T& x, const T& y);
#ifdef SVTKM_USE_STL
$binary_template_function('Max', '(std::max)(x, y)')\
$#
#else // !SVTKM_USE_STL
$binary_math_function('Max', 'fmax')\
$#
#endif // !SVTKM_USE_STL

/// Returns \p x or \p y, whichever is smaller.
///
template <typename T>
static inline SVTKM_EXEC_CONT T Min(const T& x, const T& y);
#ifdef SVTKM_USE_STL
$binary_template_function('Min', '(std::min)(x, y)')\
$#
#else // !SVTKM_USE_STL
$binary_math_function('Min', 'fmin')\
$#
#endif // !SVTKM_USE_STL

namespace detail
{

template <typename T>
static inline SVTKM_EXEC_CONT T Max(T x, T y, svtkm::TypeTraitsScalarTag)
{
  return (x < y) ? y : x;
}

template <typename T>
static inline SVTKM_EXEC_CONT T Max(const T& x, const T& y, svtkm::TypeTraitsVectorTag)
{
  using Traits = svtkm::VecTraits<T>;
  T result;
  for (svtkm::IdComponent index = 0; index < Traits::NUM_COMPONENTS; index++)
  {
    Traits::SetComponent(
      result, index, svtkm::Max(Traits::GetComponent(x, index), Traits::GetComponent(y, index)));
  }
  return result;
}

template <typename T>
static inline SVTKM_EXEC_CONT T Min(T x, T y, svtkm::TypeTraitsScalarTag)
{
  return (x < y) ? x : y;
}

template <typename T>
static inline SVTKM_EXEC_CONT T Min(const T& x, const T& y, svtkm::TypeTraitsVectorTag)
{
  using Traits = svtkm::VecTraits<T>;
  T result;
  for (svtkm::IdComponent index = 0; index < Traits::NUM_COMPONENTS; index++)
  {
    Traits::SetComponent(
      result, index, svtkm::Min(Traits::GetComponent(x, index), Traits::GetComponent(y, index)));
  }
  return result;
}

} // namespace detail

/// Returns \p x or \p y, whichever is larger.
///
template <typename T>
static inline SVTKM_EXEC_CONT T Max(const T& x, const T& y)
{
  return detail::Max(x, y, typename svtkm::TypeTraits<T>::DimensionalityTag());
}

/// Returns \p x or \p y, whichever is smaller.
///
template <typename T>
static inline SVTKM_EXEC_CONT T Min(const T& x, const T& y)
{
  return detail::Min(x, y, typename svtkm::TypeTraits<T>::DimensionalityTag());
}

/// Clamp \p x to the given range.
///

inline SVTKM_EXEC_CONT svtkm::Float32 Clamp(svtkm::Float32 x, svtkm::Float32 lo, svtkm::Float32 hi)
{
  return x > lo ? (x < hi ? x : hi) : lo;
}

inline SVTKM_EXEC_CONT svtkm::Float64 Clamp(svtkm::Float64 x, svtkm::Float64 lo, svtkm::Float64 hi)
{
  return x > lo ? (x < hi ? x : hi) : lo;
}
//-----------------------------------------------------------------------------

//#ifdef SVTKM_CUDA
#define SVTKM_USE_IEEE_NONFINITE
//#endif

#ifdef SVTKM_USE_IEEE_NONFINITE

namespace detail
{

union IEEE754Bits32 {
  svtkm::UInt32 bits;
  svtkm::Float32 scalar;
};
#define SVTKM_NAN_BITS_32 0x7FC00000U
#define SVTKM_INF_BITS_32 0x7F800000U
#define SVTKM_NEG_INF_BITS_32 0xFF800000U
#define SVTKM_EPSILON_32 1e-5f

union IEEE754Bits64 {
  svtkm::UInt64 bits;
  svtkm::Float64 scalar;
};
#define SVTKM_NAN_BITS_64 0x7FF8000000000000ULL
#define SVTKM_INF_BITS_64 0x7FF0000000000000ULL
#define SVTKM_NEG_INF_BITS_64 0xFFF0000000000000ULL
#define SVTKM_EPSILON_64 1e-9

template <typename T>
struct FloatLimits;

template <>
struct FloatLimits<svtkm::Float32>
{
  using BitsType = svtkm::detail::IEEE754Bits32;

  SVTKM_EXEC_CONT
  static svtkm::Float32 Nan()
  {
    BitsType nan = { SVTKM_NAN_BITS_32 };
    return nan.scalar;
  }

  SVTKM_EXEC_CONT
  static svtkm::Float32 Infinity()
  {
    BitsType inf = { SVTKM_INF_BITS_32 };
    return inf.scalar;
  }

  SVTKM_EXEC_CONT
  static svtkm::Float32 NegativeInfinity()
  {
    BitsType neginf = { SVTKM_NEG_INF_BITS_32 };
    return neginf.scalar;
  }

  SVTKM_EXEC_CONT
  static svtkm::Float32 Epsilon() { return SVTKM_EPSILON_32; }
};

template <int N>
struct FloatLimits<svtkm::Vec<svtkm::Float32, N>>
{
  using BitsType = svtkm::detail::IEEE754Bits32;

  SVTKM_EXEC_CONT
  static svtkm::Vec<svtkm::Float32, N> Nan()
  {
    BitsType nan = { SVTKM_NAN_BITS_32 };
    return svtkm::Vec<svtkm::Float32, N>(nan.scalar);
  }

  SVTKM_EXEC_CONT
  static svtkm::Vec<svtkm::Float32, N> Infinity()
  {
    BitsType inf = { SVTKM_INF_BITS_32 };
    return svtkm::Vec<svtkm::Float32, N>(inf.scalar);
  }

  SVTKM_EXEC_CONT
  static svtkm::Vec<svtkm::Float32, N> NegativeInfinity()
  {
    BitsType neginf = { SVTKM_NEG_INF_BITS_32 };
    return svtkm::Vec<svtkm::Float32, N>(neginf.scalar);
  }

  SVTKM_EXEC_CONT
  static svtkm::Vec<svtkm::Float32, N> Epsilon()
  {
    return svtkm::Vec<svtkm::Float32, N>(SVTKM_EPSILON_32);
  }
};

template <>
struct FloatLimits<svtkm::Float64>
{
  using BitsType = svtkm::detail::IEEE754Bits64;

  SVTKM_EXEC_CONT
  static svtkm::Float64 Nan()
  {
    BitsType nan = { SVTKM_NAN_BITS_64 };
    return nan.scalar;
  }

  SVTKM_EXEC_CONT
  static svtkm::Float64 Infinity()
  {
    BitsType inf = { SVTKM_INF_BITS_64 };
    return inf.scalar;
  }

  SVTKM_EXEC_CONT
  static svtkm::Float64 NegativeInfinity()
  {
    BitsType neginf = { SVTKM_NEG_INF_BITS_64 };
    return neginf.scalar;
  }

  SVTKM_EXEC_CONT
  static svtkm::Float64 Epsilon() { return SVTKM_EPSILON_64; }
};

template <int N>
struct FloatLimits<svtkm::Vec<svtkm::Float64, N>>
{
  using BitsType = svtkm::detail::IEEE754Bits64;

  SVTKM_EXEC_CONT
  static svtkm::Vec<svtkm::Float64, N> Nan()
  {
    BitsType nan = { SVTKM_NAN_BITS_64 };
    return svtkm::Vec<svtkm::Float64, N>(nan.scalar);
  }

  SVTKM_EXEC_CONT
  static svtkm::Vec<svtkm::Float64, N> Infinity()
  {
    BitsType inf = { SVTKM_INF_BITS_64 };
    return svtkm::Vec<svtkm::Float64, N>(inf.scalar);
  }

  SVTKM_EXEC_CONT
  static svtkm::Vec<svtkm::Float64, N> NegativeInfinity()
  {
    BitsType neginf = { SVTKM_NEG_INF_BITS_64 };
    return svtkm::Vec<svtkm::Float64, N>(neginf.scalar);
  }

  SVTKM_EXEC_CONT
  static svtkm::Vec<svtkm::Float64, N> Epsilon()
  {
    return svtkm::Vec<svtkm::Float64, N>(SVTKM_EPSILON_64);
  }
};

#undef SVTKM_NAN_BITS_32
#undef SVTKM_INF_BITS_32
#undef SVTKM_NEG_INF_BITS_32
#undef SVTKM_EPSILON_32
#undef SVTKM_NAN_BITS_64
#undef SVTKM_INF_BITS_64
#undef SVTKM_NEG_INF_BITS_64
#undef SVTKM_EPSILON_64

} // namespace detail

/// Returns the representation for not-a-number (NaN).
///
template <typename T>
static inline SVTKM_EXEC_CONT T Nan()
{
  return detail::FloatLimits<T>::Nan();
}

/// Returns the representation for infinity.
///
template <typename T>
static inline SVTKM_EXEC_CONT T Infinity()
{
  return detail::FloatLimits<T>::Infinity();
}

/// Returns the representation for negative infinity.
///
template <typename T>
static inline SVTKM_EXEC_CONT T NegativeInfinity()
{
  return detail::FloatLimits<T>::NegativeInfinity();
}

/// Returns the difference between 1 and the least value greater than 1
/// that is representable.
///
template <typename T>
static inline SVTKM_EXEC_CONT T Epsilon()
{
  return detail::FloatLimits<T>::Epsilon();
}

#else  // !SVTKM_USE_IEEE_NONFINITE

/// Returns the representation for not-a-number (NaN).
///
template <typename T>
static inline SVTKM_EXEC_CONT T Nan()
{
  return std::numeric_limits<T>::quiet_NaN();
}

/// Returns the representation for infinity.
///
template <typename T>
static inline SVTKM_EXEC_CONT T Infinity()
{
  return std::numeric_limits<T>::infinity();
}

/// Returns the representation for negative infinity.
///
template <typename T>
static inline SVTKM_EXEC_CONT T NegativeInfinity()
{
  return -std::numeric_limits<T>::infinity();
}

/// Returns the difference between 1 and the least value greater than 1
/// that is representable.
///
template <typename T>
static inline SVTKM_EXEC_CONT T Epsilon()
{
  return std::numeric_limits<T>::epsilon();
}
#endif // !SVTKM_USE_IEEE_NONFINITE

/// Returns the representation for not-a-number (NaN).
///
static inline SVTKM_EXEC_CONT svtkm::Float32 Nan32()
{
  return svtkm::Nan<svtkm::Float32>();
}
static inline SVTKM_EXEC_CONT svtkm::Float64 Nan64()
{
  return svtkm::Nan<svtkm::Float64>();
}

/// Returns the representation for infinity.
///
static inline SVTKM_EXEC_CONT svtkm::Float32 Infinity32()
{
  return svtkm::Infinity<svtkm::Float32>();
}
static inline SVTKM_EXEC_CONT svtkm::Float64 Infinity64()
{
  return svtkm::Infinity<svtkm::Float64>();
}

/// Returns the representation for negative infinity.
///
static inline SVTKM_EXEC_CONT svtkm::Float32 NegativeInfinity32()
{
  return svtkm::NegativeInfinity<svtkm::Float32>();
}
static inline SVTKM_EXEC_CONT svtkm::Float64 NegativeInfinity64()
{
  return svtkm::NegativeInfinity<svtkm::Float64>();
}

/// Returns the difference between 1 and the least value greater than 1
/// that is representable.
///
static inline SVTKM_EXEC_CONT svtkm::Float32 Epsilon32()
{
  return svtkm::Epsilon<svtkm::Float32>();
}
static inline SVTKM_EXEC_CONT svtkm::Float64 Epsilon64()
{
  return svtkm::Epsilon<svtkm::Float64>();
}

//-----------------------------------------------------------------------------
/// Returns true if \p x is not a number.
///
template <typename T>
static inline SVTKM_EXEC_CONT bool IsNan(T x)
{
#ifndef SVTKM_CUDA
  using std::isnan;
#endif
  return (isnan(x) != 0);
}

/// Returns true if \p x is positive or negative infinity.
///
template <typename T>
static inline SVTKM_EXEC_CONT bool IsInf(T x)
{
#ifndef SVTKM_CUDA
  using std::isinf;
#endif
  return (isinf(x) != 0);
}

/// Returns true if \p x is a normal number (not NaN or infinite).
///
template <typename T>
static inline SVTKM_EXEC_CONT bool IsFinite(T x)
{
#ifndef SVTKM_CUDA
  using std::isfinite;
#endif
  return (isfinite(x) != 0);
}

//-----------------------------------------------------------------------------
/// Round \p x to the smallest integer value not less than x.
///
$unary_math_function('Ceil', 'ceil')\

/// Round \p x to the largest integer value not greater than x.
///
$unary_math_function('Floor', 'floor')\

/// Round \p x to the nearest integral value.
///
$unary_math_function_no_vec('Round', 'round')\
$#
$unary_Vec_function('Round')\

//-----------------------------------------------------------------------------
/// Computes the remainder on division of 2 floating point numbers. The return
/// value is \p numerator - n \p denominator, where n is the quotient of \p
/// numerator divided by \p denominator rounded towards zero to an integer. For
/// example, <tt>FMod(6.5, 2.3)</tt> returns 1.9, which is 6.5 - 2*2.3.
///
$binary_math_function('FMod', 'fmod')\

/// Computes the remainder on division of 2 floating point numbers. The return
/// value is \p numerator - n \p denominator, where n is the quotient of \p
/// numerator divided by \p denominator rounded towards the nearest integer
/// (instead of toward zero like FMod). For example, <tt>FMod(6.5, 2.3)</tt>
/// returns -0.4, which is 6.5 - 3*2.3.
///
#ifdef SVTKM_MSVC
template <typename T>
static inline SVTKM_EXEC_CONT T Remainder(T numerator, T denominator)
{
  T quotient = svtkm::Round(numerator / denominator);
  return numerator - quotient * denominator;
}
#else // !SVTKM_MSVC
$binary_math_function('Remainder', 'remainder')\
$#
#endif // !SVTKM_MSVC

/// Returns the remainder on division of 2 floating point numbers just like
/// Remainder. In addition, this function also returns the \c quotient used to
/// get that remainder.
///
template <typename QType>
static inline SVTKM_EXEC_CONT svtkm::Float32 RemainderQuotient(svtkm::Float32 numerator,
                                                             svtkm::Float32 denominator,
                                                             QType& quotient)
{
  int iQuotient;
#ifdef SVTKM_CUDA
  const svtkm::Float32 result =
    SVTKM_CUDA_MATH_FUNCTION_32(remquo)(numerator, denominator, &iQuotient);
#else
  const svtkm::Float32 result = std::remquo(numerator, denominator, &iQuotient);
#endif
  quotient = static_cast<QType>(iQuotient);
  return result;
}
template <typename QType>
static inline SVTKM_EXEC_CONT svtkm::Float64 RemainderQuotient(svtkm::Float64 numerator,
                                                             svtkm::Float64 denominator,
                                                             QType& quotient)
{
  int iQuotient;
#ifdef SVTKM_CUDA
  const svtkm::Float64 result =
    SVTKM_CUDA_MATH_FUNCTION_64(remquo)(numerator, denominator, &iQuotient);
#else
  const svtkm::Float64 result = std::remquo(numerator, denominator, &iQuotient);
#endif
  quotient = static_cast<QType>(iQuotient);
  return result;
}

/// Gets the integral and fractional parts of \c x. The return value is the
/// fractional part and \c integral is set to the integral part.
///
static inline SVTKM_EXEC_CONT svtkm::Float32 ModF(svtkm::Float32 x, svtkm::Float32& integral)
{
  return std::modf(x, &integral);
}
static inline SVTKM_EXEC_CONT svtkm::Float64 ModF(svtkm::Float64 x, svtkm::Float64& integral)
{
  return std::modf(x, &integral);
}

//-----------------------------------------------------------------------------
/// Return the absolute value of \p x. That is, return \p x if it is positive or
/// \p -x if it is negative.
///
static inline SVTKM_EXEC_CONT svtkm::Int32 Abs(svtkm::Int32 x)
{
  return abs(x);
}
static inline SVTKM_EXEC_CONT svtkm::Int64 Abs(svtkm::Int64 x)
{
#if SVTKM_SIZE_LONG == 8
  return labs(x);
#elif SVTKM_SIZE_LONG_LONG == 8
  return llabs(x);
#else
#error Unknown size of Int64.
#endif
}
static inline SVTKM_EXEC_CONT svtkm::Float32 Abs(svtkm::Float32 x)
{
#ifdef SVTKM_CUDA
  return SVTKM_CUDA_MATH_FUNCTION_32(fabs)(x);
#else
  return std::fabs(x);
#endif
}
static inline SVTKM_EXEC_CONT svtkm::Float64 Abs(svtkm::Float64 x)
{
#ifdef SVTKM_CUDA
  return SVTKM_CUDA_MATH_FUNCTION_64(fabs)(x);
#else
  return std::fabs(x);
#endif
}
template <typename T>
static inline SVTKM_EXEC_CONT typename detail::FloatingPointReturnType<T>::Type Abs(T x)
{
#ifdef SVTKM_CUDA
  return SVTKM_CUDA_MATH_FUNCTION_64(fabs)(static_cast<svtkm::Float64>(x));
#else
  return std::fabs(static_cast<svtkm::Float64>(x));
#endif
}
template <typename T, svtkm::IdComponent N>
static inline SVTKM_EXEC_CONT svtkm::Vec<T, N> Abs(const svtkm::Vec<T, N>& x)
{
  svtkm::Vec<T, N> result;
  for (svtkm::IdComponent index = 0; index < N; index++)
  {
    result[index] = svtkm::Abs(x[index]);
  }
  return result;
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Vec<T, 4> Abs(const svtkm::Vec<T, 4>& x)
{
  return svtkm::Vec<T, 4>(svtkm::Abs(x[0]), svtkm::Abs(x[1]), svtkm::Abs(x[2]), svtkm::Abs(x[3]));
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Vec<T, 3> Abs(const svtkm::Vec<T, 3>& x)
{
  return svtkm::Vec<T, 3>(svtkm::Abs(x[0]), svtkm::Abs(x[1]), svtkm::Abs(x[2]));
}
template <typename T>
static inline SVTKM_EXEC_CONT svtkm::Vec<T, 2> Abs(const svtkm::Vec<T, 2>& x)
{
  return svtkm::Vec<T, 2>(svtkm::Abs(x[0]), svtkm::Abs(x[1]));
}

/// Returns a nonzero value if \p x is negative.
///
$unary_template_function_no_vec('SignBit',
                                'static_cast<svtkm::Int32>(signbit(x))',
                                'svtkm::Int32',
'''#ifndef SVTKM_CUDA
  using std::signbit;
#endif
''')\

/// Returns true if \p x is less than zero, false otherwise.
///
$unary_template_function_no_vec('IsNegative', '(svtkm::SignBit(x) != 0)', 'bool')\

/// Copies the sign of \p y onto \p x.  If \p y is positive, returns Abs(\p x).
/// If \p y is negative, returns -Abs(\p x).
///
$binary_math_function('CopySign', 'copysign')\
$#

template <typename T, svtkm::IdComponent N>
static inline SVTKM_EXEC_CONT svtkm::Vec<T, N> CopySign(const svtkm::Vec<T, N>& x,
                                                      const svtkm::Vec<T, N>& y)
{
  svtkm::Vec<T, N> result;
  for (svtkm::IdComponent index = 0; index < N; index++)
  {
    result[index] = svtkm::CopySign(x[index], y[index]);
  }
  return result;
}

/// Decompose floating poing value
///

inline SVTKM_EXEC_CONT svtkm::Float32 Frexp(svtkm::Float32 x, svtkm::Int32 *exponent)
{
#ifdef SVTKM_CUDA
  return SVTKM_CUDA_MATH_FUNCTION_32(frexp)(x, exponent);
#else
  return std::frexp(x, exponent);
#endif
}

inline SVTKM_EXEC_CONT svtkm::Float64 Frexp(svtkm::Float64 x, svtkm::Int32 *exponent)
{
#ifdef SVTKM_CUDA
  return SVTKM_CUDA_MATH_FUNCTION_64(frexp)(x, exponent);
#else
  return std::frexp(x, exponent);
#endif
}

inline SVTKM_EXEC_CONT svtkm::Float32 Ldexp(svtkm::Float32 x, svtkm::Int32 exponent)
{
#ifdef SVTKM_CUDA
  return SVTKM_CUDA_MATH_FUNCTION_32(ldexp)(x, exponent);
#else
  return std::ldexp(x, exponent);
#endif
}

inline SVTKM_EXEC_CONT svtkm::Float64 Ldexp(svtkm::Float64 x, svtkm::Int32 exponent)
{
#ifdef SVTKM_CUDA
  return SVTKM_CUDA_MATH_FUNCTION_64(ldexp)(x, exponent);
#else
  return std::ldexp(x, exponent);
#endif
}

/// Bitwise operations
///

/// Find the first set bit in @a word, and return its position (1-32). If no
/// bits are set, returns 0.
#ifdef SVTKM_CUDA_DEVICE_PASS
// Need to explicitly mark this as __device__ since __ffs is device only.
inline __device__
svtkm::Int32 FindFirstSetBit(svtkm::UInt32 word)
{
  // Output is [0,32], with ffs(0) == 0
  return __ffs(static_cast<int>(word));
}
#else // CUDA_DEVICE_PASS
inline SVTKM_EXEC_CONT
svtkm::Int32 FindFirstSetBit(svtkm::UInt32 word)
{
#  if defined(SVTKM_GCC) || defined(SVTKM_CLANG)

  // Output is [0,32], with ffs(0) == 0
  return __builtin_ffs(static_cast<int>(word));

#  elif defined(SVTKM_MSVC)

  // Output is [0, 31], check return code to see if bits are set:
  svtkm::UInt32 firstSet;
  return _BitScanForward(reinterpret_cast<DWORD*>(&firstSet), word) != 0
         ? static_cast<svtkm::Int32>(firstSet + 1) : 0;

#  elif defined(SVTKM_ICC)

  // Output is [0, 31], undefined if word is 0.
  return word != 0 ? _bit_scan_forward(word) + 1 : 0;

#  else

  // Naive implementation:
  if (word == 0)
  {
    return 0;
  }

  svtkm::Int32 bit = 1;
  while ((word & 0x1) == 0)
  {
    word >>= 1;
    ++bit;
  }
  return bit;

#  endif
}
#endif // CUDA_DEVICE_PASS

/// Find the first set bit in @a word, and return its position (1-64). If no
/// bits are set, returns 0.
#ifdef SVTKM_CUDA_DEVICE_PASS
// Need to explicitly mark this as __device__ since __ffsll is device only.
inline __device__
svtkm::Int32 FindFirstSetBit(svtkm::UInt64 word)
{

  // Output is [0,64], with ffs(0) == 0
  return __ffsll(static_cast<long long int>(word));
}
#else // CUDA_DEVICE_PASS
inline SVTKM_EXEC_CONT
svtkm::Int32 FindFirstSetBit(svtkm::UInt64 word)
{
#  if defined(SVTKM_GCC) || defined(SVTKM_CLANG) || defined(SVTKM_ICC)

  // Output is [0,64], with ffs(0) == 0
  return __builtin_ffsll(static_cast<long long int>(word));

#  elif defined(SVTKM_MSVC)

  // Output is [0, 63], check return code to see if bits are set:
  svtkm::UInt32 firstSet;
  return _BitScanForward64(reinterpret_cast<DWORD*>(&firstSet), word) != 0
         ? static_cast<svtkm::Int32>(firstSet + 1) : 0;

#  else

  // Naive implementation:
  if (word == 0)
  {
    return 0;
  }

  svtkm::Int32 bit = 1;
  while ((word & 0x1) == 0)
  {
    word >>= 1;
    ++bit;
  }
  return bit;

#  endif
}
#endif // CUDA_DEVICE_PASS

/// Count the total number of bits set in @a word.
#ifdef SVTKM_CUDA_DEVICE_PASS
// Need to explicitly mark this as __device__ since __popc is device only.
inline __device__
svtkm::Int32 CountSetBits(svtkm::UInt32 word)
{
  return __popc(word);
}
#else // CUDA_DEVICE_PASS
inline SVTKM_EXEC_CONT
svtkm::Int32 CountSetBits(svtkm::UInt32 word)
{
#  if defined(SVTKM_GCC) || defined(SVTKM_CLANG)

  return __builtin_popcount(word);

#  elif defined(SVTKM_MSVC)

  return static_cast<svtkm::Int32>(__popcnt(word));

#  elif defined(SVTKM_ICC)

  return _popcnt32(static_cast<int>(word));

#  else

  // Naive implementation:
  svtkm::Int32 bits = 0;
  while (word)
  {
    if (word & 0x1)
    {
      ++bits;
    }
    word >>= 1;
  }
  return bits;

#  endif
}
#endif // CUDA_DEVICE_PASS

/// Count the total number of bits set in @a word.
#ifdef SVTKM_CUDA_DEVICE_PASS
// Need to explicitly mark this as __device__ since __popcll is device only.
inline __device__
svtkm::Int32 CountSetBits(svtkm::UInt64 word)
{
  return __popcll(word);
}
#else // CUDA_DEVICE_PASS
inline SVTKM_EXEC_CONT
svtkm::Int32 CountSetBits(svtkm::UInt64 word)
{
#  if defined(SVTKM_GCC) || defined(SVTKM_CLANG)

  return __builtin_popcountll(word);

#  elif defined(SVTKM_MSVC)

  return static_cast<svtkm::Int32>(__popcnt64(word));

#  elif defined(SVTKM_ICC)

  return _popcnt64(static_cast<svtkm::Int64>(word));

#  else

  // Naive implementation:
  svtkm::Int32 bits = 0;
  while (word)
  {
    if (word & 0x1)
    {
      ++bits;
    }
    word >>= 1;
  }
  return bits;

#  endif
}
#endif // CUDA_DEVICE_PASS

} // namespace svtkm
// clang-format on

#endif //svtk_m_Math_h
