/*=========================================================================

  Program:   Visualization Toolkit
  Module:    TestTreeMapLayoutStrategy.cxx

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/*-------------------------------------------------------------------------
  Copyright 2008 Sandia Corporation.
  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
  the U.S. Government retains certain rights in this software.
-------------------------------------------------------------------------*/

#include "svtkActor.h"
#include "svtkCirclePackFrontChainLayoutStrategy.h"
#include "svtkCirclePackLayout.h"
#include "svtkCirclePackToPolyData.h"
#include "svtkIntArray.h"
#include "svtkMutableDirectedGraph.h"
#include "svtkPointData.h"
#include "svtkPolyDataMapper.h"
#include "svtkRegressionTestImage.h"
#include "svtkRenderWindow.h"
#include "svtkRenderWindowInteractor.h"
#include "svtkRenderer.h"
#include "svtkSmartPointer.h"
#include "svtkTestUtilities.h"
#include "svtkTree.h"
#include "svtkTreeFieldAggregator.h"

#define SVTK_CREATE(type, name) svtkSmartPointer<type> name = svtkSmartPointer<type>::New()

void TestStrategy(svtkCirclePackLayoutStrategy* strategy, svtkTreeAlgorithm* input, double posX,
  double posY, svtkRenderer* ren)
{
  SVTK_CREATE(svtkCirclePackLayout, layout);
  layout->SetLayoutStrategy(strategy);
  layout->SetInputConnection(input->GetOutputPort());
  layout->Update();
  svtkDataArray* vda = layout->GetOutput()->GetVertexData()->GetArray("circles");
  // Test GetBoundingCircle() and FindVertex()
  double cinfo[3];
  layout->GetBoundingCircle(vda->GetNumberOfTuples() - 1, cinfo);
  double pnt[2];
  pnt[0] = cinfo[0];
  pnt[1] = cinfo[1];
  if (((int)layout->FindVertex(pnt)) != (vda->GetNumberOfTuples() - 1))
  {
    cout << "GetBoundingCircle() and FindVertex() returned incorrect id" << endl;
    exit(1);
  }

  SVTK_CREATE(svtkCirclePackToPolyData, poly);
  poly->SetInputConnection(layout->GetOutputPort());
  SVTK_CREATE(svtkPolyDataMapper, mapper);
  mapper->SetInputConnection(poly->GetOutputPort());
  mapper->SetScalarRange(0, 600);
  mapper->SetScalarModeToUseCellFieldData();
  mapper->SelectColorArray("size");
  SVTK_CREATE(svtkActor, actor);
  actor->SetMapper(mapper);
  actor->SetPosition(posX, posY, 0);
  ren->AddActor(actor);
}

int TestCirclePackLayoutStrategy(int argc, char* argv[])
{
  SVTK_CREATE(svtkRenderer, ren);
  // Create input
  SVTK_CREATE(svtkMutableDirectedGraph, builder);
  SVTK_CREATE(svtkIntArray, sizeArr);
  sizeArr->SetName("size");
  builder->GetVertexData()->AddArray(sizeArr);
  builder->AddVertex();
  sizeArr->InsertNextValue(0);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(77);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(15);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(99);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(107);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(432);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(259);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(242);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(306);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(91);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(46);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(47);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(150);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(90);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(10);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(456);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(40);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(98);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(100);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(400);
  builder->AddChild(0);
  sizeArr->InsertNextValue(500);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(105);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(15);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(410);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(320);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(410);
  builder->AddChild(0);
  sizeArr->InsertNextValue(450);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(136);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(458);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);
  builder->AddChild(0);
  sizeArr->InsertNextValue(1);

  SVTK_CREATE(svtkTree, tree);
  if (!tree->CheckedShallowCopy(builder))
  {
    cerr << "Invalid tree structure." << endl;
  }

  SVTK_CREATE(svtkTreeFieldAggregator, agg);
  agg->SetInputData(tree);
  agg->SetField("size");
  agg->SetLeafVertexUnitSize(false);

  // Test Front Chain layout
  SVTK_CREATE(svtkCirclePackFrontChainLayoutStrategy, fc);
  TestStrategy(fc, agg, 0, 0, ren);

  SVTK_CREATE(svtkRenderWindowInteractor, iren);
  SVTK_CREATE(svtkRenderWindow, win);
  win->AddRenderer(ren);
  win->SetInteractor(iren);

  int retVal = svtkRegressionTestImage(win);
  if (retVal == svtkRegressionTester::DO_INTERACTOR)
  {
    win->Render();
    iren->Start();
    retVal = svtkRegressionTester::PASSED;
  }
  return !retVal;
}
