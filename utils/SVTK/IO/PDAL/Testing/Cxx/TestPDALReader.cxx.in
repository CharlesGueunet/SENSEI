/*=========================================================================

  Program:   Visualization Toolkit
  Module:    TestGaussianBlurPass.cxx

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * This tests reading a file using a PDAL reader.
 */

#include "svtkCamera.h"
#include "svtkDataArray.h"
#include "svtkLookupTable.h"
#include "svtkNew.h"
#include "svtkPDALReader.h"
#include "svtkPointData.h"
#include "svtkPolyDataMapper.h"
#include "svtkRegressionTestImage.h"
#include "svtkRenderer.h"
#include "svtkRenderWindowInteractor.h"
#include "svtkRenderWindow.h"
#include "svtkSmartPointer.h"
#include "svtkTestUtilities.h"





int TestPDALReader_@SVTK_PDAL_READER_POSTFIX@(int argc, char *argv[])
{
  const char* fileName = "Data/@SVTK_PDAL_READER_TEST_INPUT@";
  const char* path = svtkTestUtilities::ExpandDataFileName(argc, argv, fileName);
  svtkNew<svtkPDALReader> reader;
  //Select source file
  reader->SetFileName(path);
  delete [] path;

  //Read the output
  reader->Update();

  svtkSmartPointer<svtkPolyData> outputData = reader->GetOutput();

  bool useClassification = false;
  bool useColor = false;
  svtkDataArray* classification = outputData->GetPointData()->GetArray("Classification");
  svtkDataArray* intensity = outputData->GetPointData()->GetArray("Intensity");
  svtkDataArray* color = outputData->GetPointData()->GetArray("Color");
  double range[2];
  if (classification)
  {
    classification->GetRange(range, 0);
    if (range[0] != range[1] &&
        std::string(classification->GetClassName()) != "svtkTypeUInt8Array")
    {
      std::cout << "Color by classification " << classification->GetClassName() << "\n";
      useClassification = true;
      outputData->GetPointData()->SetActiveScalars("Classification");
    }
  }
  if (! useClassification)
  {
    if (color)
    {
      color->GetRange(range, 0);
      if (range[0] != range[1])
      {
        std::cout << "Color by color scalar\n";
        useColor = true;
        outputData->GetPointData()->SetActiveScalars("Color");
      }
    }
    else
    {
      std::cout << "Color by intensity\n";
      intensity->GetRange(range, 0);
      outputData->GetPointData()->SetActiveScalars("Intensity");
    }
  }


  // svtkNew<svtkXMLPolyDataWriter> writer;
  // writer->SetFileName("test.vtp");
  // writer->SetInputData(outputData);
  // writer->Write();

  //Visualise in a render window
  svtkNew<svtkPolyDataMapper> mapper;
  mapper->SetInputData(outputData);
  if (useColor)
  {
    mapper->SetColorModeToDirectScalars();
  }
  else
  {
    mapper->SetScalarRange(range);
  }

  svtkNew<svtkActor> actor;
  actor->SetMapper(mapper);

  svtkNew<svtkRenderer> renderer;
  svtkNew<svtkRenderWindow> renderWindow;
  renderWindow->AddRenderer(renderer);

  svtkNew<svtkRenderWindowInteractor> renderWindowInteractor;
  renderWindowInteractor->SetRenderWindow(renderWindow);
  renderer->AddActor(actor);
  renderer->ResetCamera();

  svtkCamera *camera=renderer->GetActiveCamera();
  camera->Elevation(@SVTK_PDAL_READER_ELEVATION@);

  int retVal = svtkRegressionTestImageThreshold (renderWindow, 0.2);
  if (retVal == svtkRegressionTester::DO_INTERACTOR)
  {
    renderWindowInteractor->Start ();
    retVal = svtkRegressionTester::PASSED;
  }
  return !((retVal == svtkTesting::PASSED) || (retVal == svtkTesting::DO_INTERACTOR));
}
