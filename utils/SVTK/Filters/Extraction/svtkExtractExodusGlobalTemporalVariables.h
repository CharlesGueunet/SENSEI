/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkExtractExodusGlobalTemporalVariables.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class svtkExtractExodusGlobalTemporalVariables
 * @brief extract global temporal arrays generated by svtkExodusIIReader
 *
 * svtkExtractExodusGlobalTemporalVariables is intended to extract global
 * temporal arrays generated by svtkExodusIIReader.
 *
 * Global temporal variables are special arrays that have values per timestep.
 * svtkExodusIIReader can read these values for all timestep and provide them
 * easily, thus avoiding the need to read all timesteps to extract these values
 * over timesteps. A slight complication is with ParaView, where ParaView
 * supports what are referred to as restarts i.e. instead of a single file
 * having all timesteps, the timesteps are arbitrarily split among multiple
 * files. For such cases, this filter needs to iterate over all the files to
 * accumulate the data. Since there's no information about files or ability to
 * request the upstream reader to read a particular file, this filter request
 * specific timesteps using some smarts to determine which timestep to request
 * and not simply loop over all timesteps.
 *
 * @sa svtkExodusIIReader, svtkExodusIIReader::GLOBAL_TEMPORAL_VARIABLE.
 */
#ifndef svtkExtractExodusGlobalTemporalVariables_h
#define svtkExtractExodusGlobalTemporalVariables_h

#include "svtkFiltersExtractionModule.h" // For export macro
#include "svtkTableAlgorithm.h"

#include <memory> // for std::unique_ptr

class SVTKFILTERSEXTRACTION_EXPORT svtkExtractExodusGlobalTemporalVariables : public svtkTableAlgorithm
{
public:
  static svtkExtractExodusGlobalTemporalVariables* New();
  svtkTypeMacro(svtkExtractExodusGlobalTemporalVariables, svtkTableAlgorithm);
  void PrintSelf(ostream& os, svtkIndent indent) override;

protected:
  svtkExtractExodusGlobalTemporalVariables();
  ~svtkExtractExodusGlobalTemporalVariables() override;

  int FillInputPortInformation(int port, svtkInformation* info) override;
  int RequestInformation(svtkInformation* request, svtkInformationVector** inputVector,
    svtkInformationVector* outputVector) override;
  int RequestUpdateExtent(svtkInformation* request, svtkInformationVector** inputVector,
    svtkInformationVector* outputVector) override;
  int RequestData(svtkInformation* request, svtkInformationVector** inputVector,
    svtkInformationVector* outputVector) override;

  //@{
  /**
   * These methods are used by svtkPExtractExodusGlobalTemporalVariables to
   * synchronize internal state between ranks.
   */
  void GetContinuationState(bool& continue_executing_flag, size_t& offset) const;
  void SetContinuationState(bool continue_executing_flag, size_t offset);
  //@}

private:
  svtkExtractExodusGlobalTemporalVariables(const svtkExtractExodusGlobalTemporalVariables&) = delete;
  void operator=(const svtkExtractExodusGlobalTemporalVariables&) = delete;

  class svtkInternals;
  std::unique_ptr<svtkInternals> Internals;
};

#endif
