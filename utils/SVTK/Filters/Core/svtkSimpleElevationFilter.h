/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkSimpleElevationFilter.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   svtkSimpleElevationFilter
 * @brief   generate scalars along a specified direction
 *
 * svtkSimpleElevationFilter is a filter to generate scalar values from a
 * dataset.  The scalar values are generated by dotting a user-specified
 * vector against a vector defined from the input dataset points to the
 * origin.
 *
 * @warning
 * This class has been threaded with svtkSMPTools. Using TBB or other
 * non-sequential type (set in the CMake variable
 * SVTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.  Note
 * however that the associated threading/templating implements a fast path,
 * which will only kick in when the input has explicit point representation
 * (e.g. a svtkPointSet).
 *
 * @warning
 * See also svtkElevationFilter provides more control over the operation,
 * including clamping the output scalars within a range.
 *
 * @sa
 * svtkElevationFilter
 */

#ifndef svtkSimpleElevationFilter_h
#define svtkSimpleElevationFilter_h

#include "svtkDataSetAlgorithm.h"
#include "svtkFiltersCoreModule.h" // For export macro

class SVTKFILTERSCORE_EXPORT svtkSimpleElevationFilter : public svtkDataSetAlgorithm
{
public:
  svtkTypeMacro(svtkSimpleElevationFilter, svtkDataSetAlgorithm);
  void PrintSelf(ostream& os, svtkIndent indent) override;

  /**
   * Construct object with Vector=(0,0,1).
   */
  static svtkSimpleElevationFilter* New();

  //@{
  /**
   * Define the vector with which to dot against.
   */
  svtkSetVector3Macro(Vector, double);
  svtkGetVectorMacro(Vector, double, 3);
  //@}

protected:
  svtkSimpleElevationFilter();
  ~svtkSimpleElevationFilter() override {}

  int RequestData(svtkInformation*, svtkInformationVector**, svtkInformationVector*) override;
  double Vector[3];

private:
  svtkSimpleElevationFilter(const svtkSimpleElevationFilter&) = delete;
  void operator=(const svtkSimpleElevationFilter&) = delete;
};

#endif
