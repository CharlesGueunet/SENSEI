/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkElevationFilter.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   svtkElevationFilter
 * @brief   generate scalars along a specified direction
 *
 * svtkElevationFilter is a filter to generate scalar values from a
 * dataset.  The scalar values lie within a user specified range, and
 * are generated by computing a projection of each dataset point onto
 * a line. The line can be oriented arbitrarily. A typical example is
 * to generate scalars based on elevation or height above a plane.
 *
 * @warning
 * svtkSimpleElevationFilter may be easier to use in many cases; e.g.,
 * compute vertical elevation above zero z-point.
 *
 * @warning
 * This class has been threaded with svtkSMPTools. Using TBB or other
 * non-sequential type (set in the CMake variable
 * SVTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
 *
 * @sa
 * svtkSimpleElevationFilter
 */

#ifndef svtkElevationFilter_h
#define svtkElevationFilter_h

#include "svtkDataSetAlgorithm.h"
#include "svtkFiltersCoreModule.h" // For export macro

class SVTKFILTERSCORE_EXPORT svtkElevationFilter : public svtkDataSetAlgorithm
{
public:
  static svtkElevationFilter* New();
  svtkTypeMacro(svtkElevationFilter, svtkDataSetAlgorithm);
  void PrintSelf(ostream& os, svtkIndent indent) override;

  //@{
  /**
   * Define one end of the line (small scalar values).  Default is
   * (0,0,0).
   */
  svtkSetVector3Macro(LowPoint, double);
  svtkGetVectorMacro(LowPoint, double, 3);
  //@}

  //@{
  /**
   * Define other end of the line (large scalar values).  Default is
   * (0,0,1).
   */
  svtkSetVector3Macro(HighPoint, double);
  svtkGetVectorMacro(HighPoint, double, 3);
  //@}

  //@{
  /**
   * Specify range to map scalars into.  Default is [0, 1].
   */
  svtkSetVector2Macro(ScalarRange, double);
  svtkGetVectorMacro(ScalarRange, double, 2);
  //@}

protected:
  svtkElevationFilter();
  ~svtkElevationFilter() override;

  int RequestData(svtkInformation*, svtkInformationVector**, svtkInformationVector*) override;

  double LowPoint[3];
  double HighPoint[3];
  double ScalarRange[2];

private:
  svtkElevationFilter(const svtkElevationFilter&) = delete;
  void operator=(const svtkElevationFilter&) = delete;
};

#endif
