/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkDijkstraImageGeodesicPath.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   svtkDijkstraImageGeodesicPath
 * @brief   Dijkstra algorithm to compute the graph geodesic.
 *
 * Takes as input a polyline and an image representing a 2D cost function
 * and performs a single source shortest path calculation.
 * Dijkstra's algorithm is used. The implementation is
 * similar to the one described in Introduction to Algorithms (Second Edition)
 * by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and
 * Cliff Stein, published by MIT Press and McGraw-Hill. Some minor
 * enhancement are added though. All vertices are not pushed on the heap
 * at start, instead a front set is maintained. The heap is implemented as
 * a binary heap. The output of the filter is a set of lines describing
 * the shortest path from StartVertex to EndVertex.  See parent class
 * svtkDijkstraGraphGeodesicPath for the implementation.
 *
 * @warning
 * The input cost image must have only SVTK_PIXEL cells: i.e., a 2D image or
 * slice of a 3D volume. A cost function for a gray scale image might
 * be generated by the following pipeline:
 * svtkImageData->svtkImageGradientMagnitude->svtkImageShiftScale
 * wherein the gradient magnitude image is inverted so that strong edges
 * have low cost value.  Costs in moving from a vertex v to a vertex u
 * are calculated using a weighted additive scheme:
 * cost = Iw*f(I) + Ew*f(u,v) + Cw*f(t,u,v)
 * where Iw is the weight associated with f(I): the normalized image cost,
 * Ew is the weight associated with f(u,v): the normalized distance between
 * vertices u and v, and Cw is the weight associated with f(t,u,v):
 * the normalized curvature calculated from the vertex t which precedes
 * vertex u, and vertices u and v.  All weights range from 0 to 1.
 *
 * @par Thanks:
 * The class was contributed by Dean Inglis.
 */

#ifndef svtkDijkstraImageGeodesicPath_h
#define svtkDijkstraImageGeodesicPath_h

#include "svtkDijkstraGraphGeodesicPath.h"
#include "svtkFiltersModelingModule.h" // For export macro

class svtkImageData;

class SVTKFILTERSMODELING_EXPORT svtkDijkstraImageGeodesicPath : public svtkDijkstraGraphGeodesicPath
{
public:
  /**
   * Instantiate the class
   */
  static svtkDijkstraImageGeodesicPath* New();

  //@{
  /**
   * Standard methods for printing and determining type information.
   */
  svtkTypeMacro(svtkDijkstraImageGeodesicPath, svtkDijkstraGraphGeodesicPath);
  void PrintSelf(ostream& os, svtkIndent indent) override;
  //@}

  //@{
  /**
   * Specify the image object which is used as a cost function.
   */
  void SetInputData(svtkDataObject*);
  svtkImageData* GetInputAsImageData();
  //@}

  //@{
  /**
   * Image cost weight.
   */
  void SetImageWeight(double);
  svtkGetMacro(ImageWeight, double);
  //@}

  //@{
  /**
   * Edge length cost weight.
   */
  void SetEdgeLengthWeight(double);
  svtkGetMacro(EdgeLengthWeight, double);
  //@}

  //@{
  /**
   * Curvature cost weight.
   */
  svtkSetClampMacro(CurvatureWeight, double, 0.0, 1.0);
  svtkGetMacro(CurvatureWeight, double);
  //@}

protected:
  svtkDijkstraImageGeodesicPath();
  ~svtkDijkstraImageGeodesicPath() override;

  int FillInputPortInformation(int port, svtkInformation* info) override;
  int RequestData(svtkInformation*, svtkInformationVector**, svtkInformationVector*) override;

  // Build a graph description of the image
  void BuildAdjacency(svtkDataSet* inData) override;

  // Update static costs without rebuilding adjacencyh when static weights change
  void UpdateStaticCosts(svtkImageData* image);

  // Override parent class methods.
  double CalculateStaticEdgeCost(svtkDataSet* inData, svtkIdType u, svtkIdType v) override;
  double CalculateDynamicEdgeCost(svtkDataSet* inData, svtkIdType u, svtkIdType v) override;

  double PixelSize;
  double ImageWeight;
  double EdgeLengthWeight;
  double CurvatureWeight;
  bool RebuildStaticCosts;

private:
  svtkDijkstraImageGeodesicPath(const svtkDijkstraImageGeodesicPath&) = delete;
  void operator=(const svtkDijkstraImageGeodesicPath&) = delete;
};

#endif
