/*=========================================================================

  Program:   Visualization Toolkit
  Module:    svtkSMPMergePolyDataHelper.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   svtkSMPMergePolyDataHelper
 * @brief   Utility class for merging poly data in parallel
 * This class is designed as a utility class to help merging of poly data
 * generated by filters that generate multiple polydata outputs and the associated
 * locators. It requires that the filter uses svtkSMPMergePoints which creates
 * a number of necessary data structures.
 */

#ifndef svtkSMPMergePolyDataHelper_h
#define svtkSMPMergePolyDataHelper_h

#include "svtkConfigure.h"
#include "svtkFiltersSMPModule.h"

#include <vector>

class svtkPolyData;
class svtkSMPMergePoints;
class svtkIdList;

class SVTKFILTERSSMP_EXPORT svtkSMPMergePolyDataHelper
{
public:
  //@{
  /**
   * This is the data structure needed by the MergePolyData function.
   * Each input is represented by a polydata (Input), a locator generated
   * using identical binning structure (Locator) and offset structures
   * for each svtkCellArray type. These offsets allow semi-random access
   * to the cell arrays. They should store offsets to where cells start
   * in the cell arrays. Each offset can be for 1 or more cells. The finer
   * the granularity, the better the parallelism.
   */
  struct InputData
  {
    svtkPolyData* Input;
    svtkSMPMergePoints* Locator;
    svtkIdList* VertCellOffsets;
    svtkIdList* VertConnOffsets;
    svtkIdList* LineCellOffsets;
    svtkIdList* LineConnOffsets;
    svtkIdList* PolyCellOffsets;
    svtkIdList* PolyConnOffsets;
    //@}

    InputData(svtkPolyData* input, svtkSMPMergePoints* locator, svtkIdList* vertCellOffsets,
      svtkIdList* vertConnOffsets, svtkIdList* lineCellOffsets, svtkIdList* lineConnOffsets,
      svtkIdList* polyCellOffsets, svtkIdList* polyConnOffsets)
      : Input(input)
      , Locator(locator)
      , VertCellOffsets(vertCellOffsets)
      , VertConnOffsets(vertConnOffsets)
      , LineCellOffsets(lineCellOffsets)
      , LineConnOffsets(lineConnOffsets)
      , PolyCellOffsets(polyCellOffsets)
      , PolyConnOffsets(polyConnOffsets)
    {
    }
  };

  /**
   * Given a vector of svtkSMPMergePolyDataHelper::InputData, it merges
   * them and returns a new svtkPolyData (which needs to be deleted by the
   * caller). Note that this function uses the first input as a temporary
   * merging target so it will be modified in place. If you need to preserve
   * it, use DeepCopy before passing to MergePolyData.
   */
  static svtkPolyData* MergePolyData(std::vector<InputData>& inputs);

protected:
  svtkSMPMergePolyDataHelper();
  ~svtkSMPMergePolyDataHelper();

private:
  svtkSMPMergePolyDataHelper(const svtkSMPMergePolyDataHelper&) = delete;
  void operator=(const svtkSMPMergePolyDataHelper&) = delete;
};

#endif
// SVTK-HeaderTest-Exclude: svtkSMPMergePolyDataHelper.h
